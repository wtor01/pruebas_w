// Package self_consumption provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package self_consumption

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search actives self-consumption unit config by distributor id
	// (GET /self-consumption/actives/{distributor_id})
	SearchActivesSelfConsumptionUnitConfigByDistributorId(ctx *gin.Context, distributorId string, params SearchActivesSelfConsumptionUnitConfigByDistributorIdParams)
	// Search self-consumption unit config
	// (GET /self-consumption/{distributor_id}/)
	SearchSelfConsumptionUnitConfig(ctx *gin.Context, distributorId string, params SearchSelfConsumptionUnitConfigParams)
	// Get self consumption cau
	// (GET /self-consumption/{distributor_id}/{cau})
	GetSelfConsumptionByCau(ctx *gin.Context, distributorId string, cau string, params GetSelfConsumptionByCauParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// SearchActivesSelfConsumptionUnitConfigByDistributorId operation middleware
func (siw *ServerInterfaceWrapper) SearchActivesSelfConsumptionUnitConfigByDistributorId(c *gin.Context) {

	var err error

	// ------------- Path parameter "distributor_id" -------------
	var distributorId string

	err = runtime.BindStyledParameter("simple", false, "distributor_id", c.Param("distributor_id"), &distributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchActivesSelfConsumptionUnitConfigByDistributorIdParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "date" -------------
	if paramValue := c.Query("date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", c.Request.URL.Query(), &params.Date)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter date: %s", err)})
		return
	}

	siw.Handler.SearchActivesSelfConsumptionUnitConfigByDistributorId(c, distributorId, params)
}

// SearchSelfConsumptionUnitConfig operation middleware
func (siw *ServerInterfaceWrapper) SearchSelfConsumptionUnitConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "distributor_id" -------------
	var distributorId string

	err = runtime.BindStyledParameter("simple", false, "distributor_id", c.Param("distributor_id"), &distributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchSelfConsumptionUnitConfigParams

	// ------------- Required query parameter "cups" -------------
	if paramValue := c.Query("cups"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument cups is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "cups", c.Request.URL.Query(), &params.Cups)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cups: %s", err)})
		return
	}

	// ------------- Required query parameter "date" -------------
	if paramValue := c.Query("date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", c.Request.URL.Query(), &params.Date)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter date: %s", err)})
		return
	}

	siw.Handler.SearchSelfConsumptionUnitConfig(c, distributorId, params)
}

// GetSelfConsumptionByCau operation middleware
func (siw *ServerInterfaceWrapper) GetSelfConsumptionByCau(c *gin.Context) {

	var err error

	// ------------- Path parameter "distributor_id" -------------
	var distributorId string

	err = runtime.BindStyledParameter("simple", false, "distributor_id", c.Param("distributor_id"), &distributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	// ------------- Path parameter "cau" -------------
	var cau string

	err = runtime.BindStyledParameter("simple", false, "cau", c.Param("cau"), &cau)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cau: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSelfConsumptionByCauParams

	// ------------- Required query parameter "start_date" -------------
	if paramValue := c.Query("start_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument start_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter start_date: %s", err)})
		return
	}

	// ------------- Required query parameter "end_date" -------------
	if paramValue := c.Query("end_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument end_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_date", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter end_date: %s", err)})
		return
	}

	siw.Handler.GetSelfConsumptionByCau(c, distributorId, cau, params)
}

// RegisterHandlerSearchActivesSelfConsumptionUnitConfigByDistributorId creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerSearchActivesSelfConsumptionUnitConfigByDistributorId(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresSearchActivesSelfConsumptionUnitConfigByDistributorId(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresSearchActivesSelfConsumptionUnitConfigByDistributorId creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresSearchActivesSelfConsumptionUnitConfigByDistributorId(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.SearchActivesSelfConsumptionUnitConfigByDistributorId)

	router.GET("/self-consumption/actives/:distributor_id", m...)

	return router
}

// RegisterHandlerSearchSelfConsumptionUnitConfig creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerSearchSelfConsumptionUnitConfig(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresSearchSelfConsumptionUnitConfig(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresSearchSelfConsumptionUnitConfig creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresSearchSelfConsumptionUnitConfig(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.SearchSelfConsumptionUnitConfig)

	router.GET("/self-consumption/:distributor_id/", m...)

	return router
}

// RegisterHandlerGetSelfConsumptionByCau creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetSelfConsumptionByCau(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetSelfConsumptionByCau(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetSelfConsumptionByCau creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetSelfConsumptionByCau(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetSelfConsumptionByCau)

	router.GET("/self-consumption/:distributor_id/:cau", m...)

	return router
}
