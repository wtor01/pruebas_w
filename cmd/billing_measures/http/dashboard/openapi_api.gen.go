// Package dashboard provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package dashboard

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search distributor for fiscal billing measures
	// (GET /billing-measures/dashboard/fiscal-measures)
	SearchDistributorFiscalBillingMeasures(ctx *gin.Context, params SearchDistributorFiscalBillingMeasuresParams)
	// Get billing measures resume by id
	// (GET /billing-measures/resume/{id})
	GetBillingMeasuresResumeById(ctx *gin.Context, id string)

	// (GET /billing_measure/dashboard/summary)
	GetBillingMeasureDashboardSummary(ctx *gin.Context, params GetBillingMeasureDashboardSummaryParams)

	// (GET /billing_measure/tax/measure)
	GetBillingMeasureTaxMeasure(ctx *gin.Context, params GetBillingMeasureTaxMeasureParams)

	// (GET /billing_measure/tax/measurebycups)
	GetBillingMeasureTaxMeasurebycups(ctx *gin.Context, params GetBillingMeasureTaxMeasurebycupsParams)
	// Create billing mvh
	// (POST /billing_measures/mvh)
	CreateBillingMeasuresMVH(ctx *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// SearchDistributorFiscalBillingMeasures operation middleware
func (siw *ServerInterfaceWrapper) SearchDistributorFiscalBillingMeasures(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDistributorFiscalBillingMeasuresParams

	// ------------- Required query parameter "cups" -------------
	if paramValue := c.Query("cups"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument cups is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "cups", c.Request.URL.Query(), &params.Cups)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cups: %s", err)})
		return
	}

	// ------------- Required query parameter "distributorId" -------------
	if paramValue := c.Query("distributorId"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument distributorId is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "distributorId", c.Request.URL.Query(), &params.DistributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributorId: %s", err)})
		return
	}

	// ------------- Required query parameter "start_date" -------------
	if paramValue := c.Query("start_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument start_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter start_date: %s", err)})
		return
	}

	// ------------- Required query parameter "end_date" -------------
	if paramValue := c.Query("end_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument end_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_date", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter end_date: %s", err)})
		return
	}

	siw.Handler.SearchDistributorFiscalBillingMeasures(c, params)
}

// GetBillingMeasuresResumeById operation middleware
func (siw *ServerInterfaceWrapper) GetBillingMeasuresResumeById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetBillingMeasuresResumeById(c, id)
}

// GetBillingMeasureDashboardSummary operation middleware
func (siw *ServerInterfaceWrapper) GetBillingMeasureDashboardSummary(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingMeasureDashboardSummaryParams

	// ------------- Required query parameter "distributor_id" -------------
	if paramValue := c.Query("distributor_id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument distributor_id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "distributor_id", c.Request.URL.Query(), &params.DistributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	// ------------- Required query parameter "meter_type" -------------
	if paramValue := c.Query("meter_type"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument meter_type is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "meter_type", c.Request.URL.Query(), &params.MeterType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter meter_type: %s", err)})
		return
	}

	// ------------- Required query parameter "start_date" -------------
	if paramValue := c.Query("start_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument start_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter start_date: %s", err)})
		return
	}

	// ------------- Required query parameter "end_date" -------------
	if paramValue := c.Query("end_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument end_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_date", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter end_date: %s", err)})
		return
	}

	siw.Handler.GetBillingMeasureDashboardSummary(c, params)
}

// GetBillingMeasureTaxMeasure operation middleware
func (siw *ServerInterfaceWrapper) GetBillingMeasureTaxMeasure(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingMeasureTaxMeasureParams

	// ------------- Required query parameter "distributor_id" -------------
	if paramValue := c.Query("distributor_id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument distributor_id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "distributor_id", c.Request.URL.Query(), &params.DistributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	// ------------- Required query parameter "measure_type" -------------
	if paramValue := c.Query("measure_type"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument measure_type is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "measure_type", c.Request.URL.Query(), &params.MeasureType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter measure_type: %s", err)})
		return
	}

	// ------------- Required query parameter "start_date" -------------
	if paramValue := c.Query("start_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument start_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter start_date: %s", err)})
		return
	}

	// ------------- Required query parameter "end_date" -------------
	if paramValue := c.Query("end_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument end_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_date", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter end_date: %s", err)})
		return
	}

	siw.Handler.GetBillingMeasureTaxMeasure(c, params)
}

// GetBillingMeasureTaxMeasurebycups operation middleware
func (siw *ServerInterfaceWrapper) GetBillingMeasureTaxMeasurebycups(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingMeasureTaxMeasurebycupsParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "distributor_id" -------------
	if paramValue := c.Query("distributor_id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument distributor_id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "distributor_id", c.Request.URL.Query(), &params.DistributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	// ------------- Required query parameter "measure_type" -------------
	if paramValue := c.Query("measure_type"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument measure_type is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "measure_type", c.Request.URL.Query(), &params.MeasureType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter measure_type: %s", err)})
		return
	}

	// ------------- Required query parameter "start_date" -------------
	if paramValue := c.Query("start_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument start_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter start_date: %s", err)})
		return
	}

	// ------------- Required query parameter "end_date" -------------
	if paramValue := c.Query("end_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument end_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_date", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter end_date: %s", err)})
		return
	}

	siw.Handler.GetBillingMeasureTaxMeasurebycups(c, params)
}

// CreateBillingMeasuresMVH operation middleware
func (siw *ServerInterfaceWrapper) CreateBillingMeasuresMVH(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.CreateBillingMeasuresMVH(c)
}

// RegisterHandlerSearchDistributorFiscalBillingMeasures creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerSearchDistributorFiscalBillingMeasures(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresSearchDistributorFiscalBillingMeasures(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresSearchDistributorFiscalBillingMeasures creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresSearchDistributorFiscalBillingMeasures(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.SearchDistributorFiscalBillingMeasures)

	router.GET("/billing-measures/dashboard/fiscal-measures", m...)

	return router
}

// RegisterHandlerGetBillingMeasuresResumeById creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetBillingMeasuresResumeById(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetBillingMeasuresResumeById(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetBillingMeasuresResumeById creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetBillingMeasuresResumeById(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetBillingMeasuresResumeById)

	router.GET("/billing-measures/resume/:id", m...)

	return router
}

// RegisterHandlerGetBillingMeasureDashboardSummary creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetBillingMeasureDashboardSummary(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetBillingMeasureDashboardSummary(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetBillingMeasureDashboardSummary creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetBillingMeasureDashboardSummary(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetBillingMeasureDashboardSummary)

	router.GET("/billing_measure/dashboard/summary", m...)

	return router
}

// RegisterHandlerGetBillingMeasureTaxMeasure creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetBillingMeasureTaxMeasure(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetBillingMeasureTaxMeasure(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetBillingMeasureTaxMeasure creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetBillingMeasureTaxMeasure(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetBillingMeasureTaxMeasure)

	router.GET("/billing_measure/tax/measure", m...)

	return router
}

// RegisterHandlerGetBillingMeasureTaxMeasurebycups creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetBillingMeasureTaxMeasurebycups(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetBillingMeasureTaxMeasurebycups(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetBillingMeasureTaxMeasurebycups creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetBillingMeasureTaxMeasurebycups(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetBillingMeasureTaxMeasurebycups)

	router.GET("/billing_measure/tax/measurebycups", m...)

	return router
}

// RegisterHandlerCreateBillingMeasuresMVH creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerCreateBillingMeasuresMVH(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresCreateBillingMeasuresMVH(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresCreateBillingMeasuresMVH creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresCreateBillingMeasuresMVH(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.CreateBillingMeasuresMVH)

	router.POST("/billing_measures/mvh", m...)

	return router
}
