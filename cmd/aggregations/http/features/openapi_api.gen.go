// Package features provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package features

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all aggregation features available
	// (GET /admin/aggregations/features)
	GetAllAggregationFeaturesAvailable(ctx *gin.Context, params GetAllAggregationFeaturesAvailableParams)
	// Create aggregation feature available
	// (POST /admin/aggregations/features)
	CreateAggregationFeaturesAvailable(ctx *gin.Context)
	// Delete aggregation feature available
	// (DELETE /admin/aggregations/features/{feature_id})
	DeleteAggregationFeaturesAvailable(ctx *gin.Context, featureId string)
	// Get one aggregation feature available
	// (GET /admin/aggregations/features/{feature_id})
	GetAggregationFeaturesAvailable(ctx *gin.Context, featureId string)
	// Update aggregation feature available
	// (PUT /admin/aggregations/features/{feature_id})
	UpdateAggregationFeaturesAvailable(ctx *gin.Context, featureId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// GetAllAggregationFeaturesAvailable operation middleware
func (siw *ServerInterfaceWrapper) GetAllAggregationFeaturesAvailable(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllAggregationFeaturesAvailableParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	siw.Handler.GetAllAggregationFeaturesAvailable(c, params)
}

// CreateAggregationFeaturesAvailable operation middleware
func (siw *ServerInterfaceWrapper) CreateAggregationFeaturesAvailable(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.CreateAggregationFeaturesAvailable(c)
}

// DeleteAggregationFeaturesAvailable operation middleware
func (siw *ServerInterfaceWrapper) DeleteAggregationFeaturesAvailable(c *gin.Context) {

	var err error

	// ------------- Path parameter "feature_id" -------------
	var featureId string

	err = runtime.BindStyledParameter("simple", false, "feature_id", c.Param("feature_id"), &featureId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter feature_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeleteAggregationFeaturesAvailable(c, featureId)
}

// GetAggregationFeaturesAvailable operation middleware
func (siw *ServerInterfaceWrapper) GetAggregationFeaturesAvailable(c *gin.Context) {

	var err error

	// ------------- Path parameter "feature_id" -------------
	var featureId string

	err = runtime.BindStyledParameter("simple", false, "feature_id", c.Param("feature_id"), &featureId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter feature_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetAggregationFeaturesAvailable(c, featureId)
}

// UpdateAggregationFeaturesAvailable operation middleware
func (siw *ServerInterfaceWrapper) UpdateAggregationFeaturesAvailable(c *gin.Context) {

	var err error

	// ------------- Path parameter "feature_id" -------------
	var featureId string

	err = runtime.BindStyledParameter("simple", false, "feature_id", c.Param("feature_id"), &featureId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter feature_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.UpdateAggregationFeaturesAvailable(c, featureId)
}

// RegisterHandlerGetAllAggregationFeaturesAvailable creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAllAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAllAggregationFeaturesAvailable(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAllAggregationFeaturesAvailable creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAllAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAllAggregationFeaturesAvailable)

	router.GET("/admin/aggregations/features", m...)

	return router
}

// RegisterHandlerCreateAggregationFeaturesAvailable creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerCreateAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresCreateAggregationFeaturesAvailable(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresCreateAggregationFeaturesAvailable creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresCreateAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.CreateAggregationFeaturesAvailable)

	router.POST("/admin/aggregations/features", m...)

	return router
}

// RegisterHandlerDeleteAggregationFeaturesAvailable creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeleteAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeleteAggregationFeaturesAvailable(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeleteAggregationFeaturesAvailable creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeleteAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeleteAggregationFeaturesAvailable)

	router.DELETE("/admin/aggregations/features/:feature_id", m...)

	return router
}

// RegisterHandlerGetAggregationFeaturesAvailable creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAggregationFeaturesAvailable(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAggregationFeaturesAvailable creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAggregationFeaturesAvailable)

	router.GET("/admin/aggregations/features/:feature_id", m...)

	return router
}

// RegisterHandlerUpdateAggregationFeaturesAvailable creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerUpdateAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresUpdateAggregationFeaturesAvailable(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresUpdateAggregationFeaturesAvailable creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresUpdateAggregationFeaturesAvailable(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.UpdateAggregationFeaturesAvailable)

	router.PUT("/admin/aggregations/features/:feature_id", m...)

	return router
}
