// Package aggregations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package aggregations

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AggregationCUPSCurrentType.
const (
	AggregationCUPSCurrentTypeIN AggregationCUPSCurrentType = "IN"

	AggregationCUPSCurrentTypeNEUTRAL AggregationCUPSCurrentType = "NEUTRAL"
)

// Defines values for AggregationCUPSPreviousType.
const (
	AggregationCUPSPreviousTypeNEUTRAL AggregationCUPSPreviousType = "NEUTRAL"

	AggregationCUPSPreviousTypeOUT AggregationCUPSPreviousType = "OUT"
)

// Aggregation defines model for Aggregation.
type Aggregation struct {
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
	// Embedded struct due to allOf(#/components/schemas/AggregationBase)
	AggregationBase `yaml:",inline"`
}

// Aggregation
type AggregationBase struct {
	AggregationBefore   *string    `json:"aggregation_before,omitempty"`
	AggregationConfigId string     `json:"aggregation_config_id"`
	Date                time.Time  `json:"end_date"`
	Features            []Features `json:"features"`
}

// Characteristics of CUPS in Aggregation
type AggregationCUPSCurrent struct {
	CUPS *string                     `json:"CUPS,omitempty"`
	Type *AggregationCUPSCurrentType `json:"Type,omitempty"`
}

// AggregationCUPSCurrentType defines model for AggregationCUPSCurrent.Type.
type AggregationCUPSCurrentType string

// Characteristics of CUPS in Aggregation
type AggregationCUPSPrevious struct {
	CUPS *string                      `json:"CUPS,omitempty"`
	Type *AggregationCUPSPreviousType `json:"Type,omitempty"`
}

// AggregationCUPSPreviousType defines model for AggregationCUPSPrevious.Type.
type AggregationCUPSPreviousType string

// AggregationFeature defines model for AggregationFeature.
type AggregationFeature struct {
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
	// Embedded struct due to allOf(#/components/schemas/AggregationFeaturesBase)
	AggregationFeaturesBase `yaml:",inline"`
}

// Aggregation features
type AggregationFeaturesBase struct {
	Field string `json:"field"`
	Name  string `json:"name"`
}

// AggregationWithCUPS defines model for AggregationWithCUPS.
type AggregationWithCUPS struct {
	// Embedded fields due to inline allOf schema
	ListCUPSCurrent  *[]AggregationCUPSCurrent  `json:"listCUPSCurrent,omitempty"`
	ListCUPSPrevious *[]AggregationCUPSPrevious `json:"listCUPSPrevious,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/Aggregation)
	Aggregation `yaml:",inline"`
}

// Aggregations defines model for Aggregations.
type Aggregations struct {
	// Embedded struct due to allOf(#/components/schemas/Pagination)
	Pagination `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/AggregationsResults)
	AggregationsResults `yaml:",inline"`
}

// AggregationsResults defines model for AggregationsResults.
type AggregationsResults struct {
	Results *[]Aggregation `json:"results,omitempty"`
}

// Features
type Features struct {
	Feature *AggregationFeature `json:"feature,omitempty"`
	Value   *string             `json:"value,omitempty"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	Links struct {
		// url for request next list
		Next *string `json:"next,omitempty"`

		// url for request previous list
		Prev *string `json:"prev,omitempty"`

		// url for request current list
		Self string `json:"self"`
	} `json:"_links"`
	Count  int  `json:"count"`
	Limit  int  `json:"limit"`
	Offset *int `json:"offset,omitempty"`
	Size   int  `json:"size"`
}

// GetAggregation defines model for GetAggregation.
type GetAggregation AggregationWithCUPS

// GetAggregations defines model for GetAggregations.
type GetAggregations Aggregations

// GetAllAggregationsParams defines parameters for GetAllAggregations.
type GetAllAggregationsParams struct {
	// The number of items to skip before starting to collect the result set
	Offset *int `json:"offset,omitempty"`

	// The numbers of items to return
	Limit int `json:"limit"`

	// The id of the aggregation config
	AggregationConfigId string `json:"aggregation_config_id"`

	// The day of generation the aggregations
	StartDate openapi_types.Date `json:"start_date"`

	// The day of generation the aggregations
	EndDate openapi_types.Date `json:"end_date"`
}
