// Package aggregations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package aggregations

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all aggregations
	// (GET /aggregations)
	GetAllAggregations(ctx *gin.Context, params GetAllAggregationsParams)
	// Get aggregation
	// (GET /aggregations/{aggregation_id})
	GetAggregation(ctx *gin.Context, aggregationId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// GetAllAggregations operation middleware
func (siw *ServerInterfaceWrapper) GetAllAggregations(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllAggregationsParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Required query parameter "aggregation_config_id" -------------
	if paramValue := c.Query("aggregation_config_id"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument aggregation_config_id is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "aggregation_config_id", c.Request.URL.Query(), &params.AggregationConfigId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter aggregation_config_id: %s", err)})
		return
	}

	// ------------- Required query parameter "start_date" -------------
	if paramValue := c.Query("start_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument start_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter start_date: %s", err)})
		return
	}

	// ------------- Required query parameter "end_date" -------------
	if paramValue := c.Query("end_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument end_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_date", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter end_date: %s", err)})
		return
	}

	siw.Handler.GetAllAggregations(c, params)
}

// GetAggregation operation middleware
func (siw *ServerInterfaceWrapper) GetAggregation(c *gin.Context) {

	var err error

	// ------------- Path parameter "aggregation_id" -------------
	var aggregationId string

	err = runtime.BindStyledParameter("simple", false, "aggregation_id", c.Param("aggregation_id"), &aggregationId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter aggregation_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetAggregation(c, aggregationId)
}

// RegisterHandlerGetAllAggregations creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAllAggregations(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAllAggregations(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAllAggregations creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAllAggregations(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAllAggregations)

	router.GET("/aggregations", m...)

	return router
}

// RegisterHandlerGetAggregation creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAggregation(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAggregation(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAggregation creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAggregation(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAggregation)

	router.GET("/aggregations/:aggregation_id", m...)

	return router
}
