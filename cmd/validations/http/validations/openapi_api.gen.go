// Package validations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package validations

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List validations measure
	// (GET /admin/distributors/{distributor_id}/validations-measure-config)
	ListValidationsMeasureConfig(ctx *gin.Context, distributorId string, params ListValidationsMeasureConfigParams)
	// Create validations measure config
	// (POST /admin/distributors/{distributor_id}/validations-measure-config)
	CreateValidationsMeasureConfig(ctx *gin.Context, distributorId string)
	// Delete validations measure config
	// (DELETE /admin/distributors/{distributor_id}/validations-measure-config/{configuration_id})
	DeleteValidationsMeasureConfig(ctx *gin.Context, distributorId string, configurationId string)
	// Get validations measure config
	// (GET /admin/distributors/{distributor_id}/validations-measure-config/{configuration_id})
	GetValidationsMeasureConfig(ctx *gin.Context, distributorId string, configurationId string)
	// Get validations measure config
	// (PUT /admin/distributors/{distributor_id}/validations-measure-config/{configuration_id})
	UpdateValidationsMeasureConfig(ctx *gin.Context, distributorId string, configurationId string)
	// List validations measure
	// (GET /admin/validations-measure)
	ListValidationsMeasure(ctx *gin.Context, params ListValidationsMeasureParams)
	// Create validations measure
	// (POST /admin/validations-measure)
	CreateValidationsMeasure(ctx *gin.Context)
	// Delete validations measure
	// (DELETE /admin/validations-measure/{validation_id})
	DeleteValidationsMeasure(ctx *gin.Context, validationId string)
	// Get validations measure
	// (GET /admin/validations-measure/{validation_id})
	GetValidationsMeasure(ctx *gin.Context, validationId string)
	// Update validations measure
	// (PUT /admin/validations-measure/{validation_id})
	UpdateValidationsMeasure(ctx *gin.Context, validationId string)
	// Measurement validation
	// (PUT /measure-validation/{measure-type})
	PutMeasurementValidation(ctx *gin.Context, measureType PutMeasurementValidationParamsMeasureType)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// ListValidationsMeasureConfig operation middleware
func (siw *ServerInterfaceWrapper) ListValidationsMeasureConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "distributor_id" -------------
	var distributorId string

	err = runtime.BindStyledParameter("simple", false, "distributor_id", c.Param("distributor_id"), &distributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListValidationsMeasureConfigParams

	// ------------- Optional query parameter "type" -------------
	if paramValue := c.Query("type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter type: %s", err)})
		return
	}

	siw.Handler.ListValidationsMeasureConfig(c, distributorId, params)
}

// CreateValidationsMeasureConfig operation middleware
func (siw *ServerInterfaceWrapper) CreateValidationsMeasureConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "distributor_id" -------------
	var distributorId string

	err = runtime.BindStyledParameter("simple", false, "distributor_id", c.Param("distributor_id"), &distributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.CreateValidationsMeasureConfig(c, distributorId)
}

// DeleteValidationsMeasureConfig operation middleware
func (siw *ServerInterfaceWrapper) DeleteValidationsMeasureConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "distributor_id" -------------
	var distributorId string

	err = runtime.BindStyledParameter("simple", false, "distributor_id", c.Param("distributor_id"), &distributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	// ------------- Path parameter "configuration_id" -------------
	var configurationId string

	err = runtime.BindStyledParameter("simple", false, "configuration_id", c.Param("configuration_id"), &configurationId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter configuration_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeleteValidationsMeasureConfig(c, distributorId, configurationId)
}

// GetValidationsMeasureConfig operation middleware
func (siw *ServerInterfaceWrapper) GetValidationsMeasureConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "distributor_id" -------------
	var distributorId string

	err = runtime.BindStyledParameter("simple", false, "distributor_id", c.Param("distributor_id"), &distributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	// ------------- Path parameter "configuration_id" -------------
	var configurationId string

	err = runtime.BindStyledParameter("simple", false, "configuration_id", c.Param("configuration_id"), &configurationId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter configuration_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetValidationsMeasureConfig(c, distributorId, configurationId)
}

// UpdateValidationsMeasureConfig operation middleware
func (siw *ServerInterfaceWrapper) UpdateValidationsMeasureConfig(c *gin.Context) {

	var err error

	// ------------- Path parameter "distributor_id" -------------
	var distributorId string

	err = runtime.BindStyledParameter("simple", false, "distributor_id", c.Param("distributor_id"), &distributorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor_id: %s", err)})
		return
	}

	// ------------- Path parameter "configuration_id" -------------
	var configurationId string

	err = runtime.BindStyledParameter("simple", false, "configuration_id", c.Param("configuration_id"), &configurationId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter configuration_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.UpdateValidationsMeasureConfig(c, distributorId, configurationId)
}

// ListValidationsMeasure operation middleware
func (siw *ServerInterfaceWrapper) ListValidationsMeasure(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListValidationsMeasureParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	siw.Handler.ListValidationsMeasure(c, params)
}

// CreateValidationsMeasure operation middleware
func (siw *ServerInterfaceWrapper) CreateValidationsMeasure(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.CreateValidationsMeasure(c)
}

// DeleteValidationsMeasure operation middleware
func (siw *ServerInterfaceWrapper) DeleteValidationsMeasure(c *gin.Context) {

	var err error

	// ------------- Path parameter "validation_id" -------------
	var validationId string

	err = runtime.BindStyledParameter("simple", false, "validation_id", c.Param("validation_id"), &validationId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter validation_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeleteValidationsMeasure(c, validationId)
}

// GetValidationsMeasure operation middleware
func (siw *ServerInterfaceWrapper) GetValidationsMeasure(c *gin.Context) {

	var err error

	// ------------- Path parameter "validation_id" -------------
	var validationId string

	err = runtime.BindStyledParameter("simple", false, "validation_id", c.Param("validation_id"), &validationId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter validation_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetValidationsMeasure(c, validationId)
}

// UpdateValidationsMeasure operation middleware
func (siw *ServerInterfaceWrapper) UpdateValidationsMeasure(c *gin.Context) {

	var err error

	// ------------- Path parameter "validation_id" -------------
	var validationId string

	err = runtime.BindStyledParameter("simple", false, "validation_id", c.Param("validation_id"), &validationId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter validation_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.UpdateValidationsMeasure(c, validationId)
}

// PutMeasurementValidation operation middleware
func (siw *ServerInterfaceWrapper) PutMeasurementValidation(c *gin.Context) {

	var err error

	// ------------- Path parameter "measure-type" -------------
	var measureType PutMeasurementValidationParamsMeasureType

	err = runtime.BindStyledParameter("simple", false, "measure-type", c.Param("measure-type"), &measureType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter measure-type: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.PutMeasurementValidation(c, measureType)
}

// RegisterHandlerListValidationsMeasureConfig creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerListValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresListValidationsMeasureConfig(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresListValidationsMeasureConfig creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresListValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.ListValidationsMeasureConfig)

	router.GET("/admin/distributors/:distributor_id/validations-measure-config", m...)

	return router
}

// RegisterHandlerCreateValidationsMeasureConfig creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerCreateValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresCreateValidationsMeasureConfig(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresCreateValidationsMeasureConfig creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresCreateValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.CreateValidationsMeasureConfig)

	router.POST("/admin/distributors/:distributor_id/validations-measure-config", m...)

	return router
}

// RegisterHandlerDeleteValidationsMeasureConfig creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeleteValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeleteValidationsMeasureConfig(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeleteValidationsMeasureConfig creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeleteValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeleteValidationsMeasureConfig)

	router.DELETE("/admin/distributors/:distributor_id/validations-measure-config/:configuration_id", m...)

	return router
}

// RegisterHandlerGetValidationsMeasureConfig creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetValidationsMeasureConfig(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetValidationsMeasureConfig creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetValidationsMeasureConfig)

	router.GET("/admin/distributors/:distributor_id/validations-measure-config/:configuration_id", m...)

	return router
}

// RegisterHandlerUpdateValidationsMeasureConfig creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerUpdateValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresUpdateValidationsMeasureConfig(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresUpdateValidationsMeasureConfig creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresUpdateValidationsMeasureConfig(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.UpdateValidationsMeasureConfig)

	router.PUT("/admin/distributors/:distributor_id/validations-measure-config/:configuration_id", m...)

	return router
}

// RegisterHandlerListValidationsMeasure creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerListValidationsMeasure(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresListValidationsMeasure(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresListValidationsMeasure creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresListValidationsMeasure(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.ListValidationsMeasure)

	router.GET("/admin/validations-measure", m...)

	return router
}

// RegisterHandlerCreateValidationsMeasure creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerCreateValidationsMeasure(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresCreateValidationsMeasure(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresCreateValidationsMeasure creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresCreateValidationsMeasure(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.CreateValidationsMeasure)

	router.POST("/admin/validations-measure", m...)

	return router
}

// RegisterHandlerDeleteValidationsMeasure creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeleteValidationsMeasure(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeleteValidationsMeasure(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeleteValidationsMeasure creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeleteValidationsMeasure(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeleteValidationsMeasure)

	router.DELETE("/admin/validations-measure/:validation_id", m...)

	return router
}

// RegisterHandlerGetValidationsMeasure creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetValidationsMeasure(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetValidationsMeasure(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetValidationsMeasure creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetValidationsMeasure(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetValidationsMeasure)

	router.GET("/admin/validations-measure/:validation_id", m...)

	return router
}

// RegisterHandlerUpdateValidationsMeasure creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerUpdateValidationsMeasure(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresUpdateValidationsMeasure(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresUpdateValidationsMeasure creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresUpdateValidationsMeasure(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.UpdateValidationsMeasure)

	router.PUT("/admin/validations-measure/:validation_id", m...)

	return router
}

// RegisterHandlerPutMeasurementValidation creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerPutMeasurementValidation(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresPutMeasurementValidation(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresPutMeasurementValidation creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresPutMeasurementValidation(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.PutMeasurementValidation)

	router.PUT("/measure-validation/:measure-type", m...)

	return router
}
