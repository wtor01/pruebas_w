// Package supply_point provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package supply_point

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Search curve of meter for gross measure
	// (GET /gross-measures/dashboard/{cups}/curve-process-measures)
	GetCurveGrossMeasureMeter(ctx *gin.Context, cups string, params GetCurveGrossMeasureMeterParams)
	// Search service point for gross measures
	// (GET /gross-measures/dashboard/{cups}/service-point)
	GetGrossMeasureServicePoint(ctx *gin.Context, cups string, params GetGrossMeasureServicePointParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// GetCurveGrossMeasureMeter operation middleware
func (siw *ServerInterfaceWrapper) GetCurveGrossMeasureMeter(c *gin.Context) {

	var err error

	// ------------- Path parameter "cups" -------------
	var cups string

	err = runtime.BindStyledParameter("simple", false, "cups", c.Param("cups"), &cups)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cups: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCurveGrossMeasureMeterParams

	// ------------- Required query parameter "distributor" -------------
	if paramValue := c.Query("distributor"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument distributor is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "distributor", c.Request.URL.Query(), &params.Distributor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor: %s", err)})
		return
	}

	// ------------- Required query parameter "date" -------------
	if paramValue := c.Query("date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "date", c.Request.URL.Query(), &params.Date)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter date: %s", err)})
		return
	}

	// ------------- Required query parameter "curve_type" -------------
	if paramValue := c.Query("curve_type"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument curve_type is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "curve_type", c.Request.URL.Query(), &params.CurveType)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter curve_type: %s", err)})
		return
	}

	siw.Handler.GetCurveGrossMeasureMeter(c, cups, params)
}

// GetGrossMeasureServicePoint operation middleware
func (siw *ServerInterfaceWrapper) GetGrossMeasureServicePoint(c *gin.Context) {

	var err error

	// ------------- Path parameter "cups" -------------
	var cups string

	err = runtime.BindStyledParameter("simple", false, "cups", c.Param("cups"), &cups)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter cups: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGrossMeasureServicePointParams

	// ------------- Required query parameter "distributor" -------------
	if paramValue := c.Query("distributor"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument distributor is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "distributor", c.Request.URL.Query(), &params.Distributor)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter distributor: %s", err)})
		return
	}

	// ------------- Required query parameter "start_date" -------------
	if paramValue := c.Query("start_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument start_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter start_date: %s", err)})
		return
	}

	// ------------- Required query parameter "end_date" -------------
	if paramValue := c.Query("end_date"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument end_date is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_date", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter end_date: %s", err)})
		return
	}

	siw.Handler.GetGrossMeasureServicePoint(c, cups, params)
}

// RegisterHandlerGetCurveGrossMeasureMeter creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetCurveGrossMeasureMeter(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetCurveGrossMeasureMeter(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetCurveGrossMeasureMeter creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetCurveGrossMeasureMeter(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetCurveGrossMeasureMeter)

	router.GET("/gross-measures/dashboard/:cups/curve-process-measures", m...)

	return router
}

// RegisterHandlerGetGrossMeasureServicePoint creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetGrossMeasureServicePoint(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetGrossMeasureServicePoint(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetGrossMeasureServicePoint creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetGrossMeasureServicePoint(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetGrossMeasureServicePoint)

	router.GET("/gross-measures/dashboard/:cups/service-point", m...)

	return router
}
