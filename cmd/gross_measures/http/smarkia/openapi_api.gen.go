// Package smarkia provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package smarkia

import "github.com/gin-gonic/gin"

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// recover smarkia measures
	// (POST /gross_measures/smarkia/recover)
	RecoverSmarkiaMeasures(ctx *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// RecoverSmarkiaMeasures operation middleware
func (siw *ServerInterfaceWrapper) RecoverSmarkiaMeasures(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.RecoverSmarkiaMeasures(c)
}

// RegisterHandlerRecoverSmarkiaMeasures creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerRecoverSmarkiaMeasures(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresRecoverSmarkiaMeasures(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresRecoverSmarkiaMeasures creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresRecoverSmarkiaMeasures(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.RecoverSmarkiaMeasures)

	router.POST("/gross_measures/smarkia/recover", m...)

	return router
}
