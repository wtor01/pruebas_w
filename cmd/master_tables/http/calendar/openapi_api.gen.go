// Package calendar provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package calendar

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all calendars
	// (GET /admin/master-tables/calendars)
	GetAllCalendars(ctx *gin.Context, params GetAllCalendarsParams)
	// Insert calendars
	// (POST /admin/master-tables/calendars)
	InsertCalendars(ctx *gin.Context)
	// Delete period
	// (DELETE /admin/master-tables/calendars/periods/{period-id})
	DeletePeriod(ctx *gin.Context, periodId string)
	// Get period
	// (GET /admin/master-tables/calendars/periods/{period-id})
	GetPeriod(ctx *gin.Context, periodId string)
	// Modify Period Calendar
	// (PUT /admin/master-tables/calendars/periods/{period-id})
	ModifyPeriodCalendar(ctx *gin.Context, periodId string)
	// Delete calendar
	// (DELETE /admin/master-tables/calendars/{calendar-id})
	DeleteCalendar(ctx *gin.Context, calendarId string)
	// Get calendar
	// (GET /admin/master-tables/calendars/{calendar-id})
	GetCalendar(ctx *gin.Context, calendarId string)
	// Modify all calendars
	// (PUT /admin/master-tables/calendars/{calendar-id})
	ModifyCalendar(ctx *gin.Context, calendarId string)
	// Get all periods calendars
	// (GET /admin/master-tables/calendars/{calendar-id}/periods)
	GetAllPeriodsCalendars(ctx *gin.Context, calendarId string, params GetAllPeriodsCalendarsParams)
	// Insert periods
	// (POST /admin/master-tables/calendars/{calendar-id}/periods)
	InsertPeriods(ctx *gin.Context, calendarId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// GetAllCalendars operation middleware
func (siw *ServerInterfaceWrapper) GetAllCalendars(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCalendarsParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "q" -------------
	if paramValue := c.Query("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter q: %s", err)})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	siw.Handler.GetAllCalendars(c, params)
}

// InsertCalendars operation middleware
func (siw *ServerInterfaceWrapper) InsertCalendars(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.InsertCalendars(c)
}

// DeletePeriod operation middleware
func (siw *ServerInterfaceWrapper) DeletePeriod(c *gin.Context) {

	var err error

	// ------------- Path parameter "period-id" -------------
	var periodId string

	err = runtime.BindStyledParameter("simple", false, "period-id", c.Param("period-id"), &periodId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter period-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeletePeriod(c, periodId)
}

// GetPeriod operation middleware
func (siw *ServerInterfaceWrapper) GetPeriod(c *gin.Context) {

	var err error

	// ------------- Path parameter "period-id" -------------
	var periodId string

	err = runtime.BindStyledParameter("simple", false, "period-id", c.Param("period-id"), &periodId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter period-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetPeriod(c, periodId)
}

// ModifyPeriodCalendar operation middleware
func (siw *ServerInterfaceWrapper) ModifyPeriodCalendar(c *gin.Context) {

	var err error

	// ------------- Path parameter "period-id" -------------
	var periodId string

	err = runtime.BindStyledParameter("simple", false, "period-id", c.Param("period-id"), &periodId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter period-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.ModifyPeriodCalendar(c, periodId)
}

// DeleteCalendar operation middleware
func (siw *ServerInterfaceWrapper) DeleteCalendar(c *gin.Context) {

	var err error

	// ------------- Path parameter "calendar-id" -------------
	var calendarId string

	err = runtime.BindStyledParameter("simple", false, "calendar-id", c.Param("calendar-id"), &calendarId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter calendar-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeleteCalendar(c, calendarId)
}

// GetCalendar operation middleware
func (siw *ServerInterfaceWrapper) GetCalendar(c *gin.Context) {

	var err error

	// ------------- Path parameter "calendar-id" -------------
	var calendarId string

	err = runtime.BindStyledParameter("simple", false, "calendar-id", c.Param("calendar-id"), &calendarId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter calendar-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetCalendar(c, calendarId)
}

// ModifyCalendar operation middleware
func (siw *ServerInterfaceWrapper) ModifyCalendar(c *gin.Context) {

	var err error

	// ------------- Path parameter "calendar-id" -------------
	var calendarId string

	err = runtime.BindStyledParameter("simple", false, "calendar-id", c.Param("calendar-id"), &calendarId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter calendar-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.ModifyCalendar(c, calendarId)
}

// GetAllPeriodsCalendars operation middleware
func (siw *ServerInterfaceWrapper) GetAllPeriodsCalendars(c *gin.Context) {

	var err error

	// ------------- Path parameter "calendar-id" -------------
	var calendarId string

	err = runtime.BindStyledParameter("simple", false, "calendar-id", c.Param("calendar-id"), &calendarId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter calendar-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllPeriodsCalendarsParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "q" -------------
	if paramValue := c.Query("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter q: %s", err)})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	siw.Handler.GetAllPeriodsCalendars(c, calendarId, params)
}

// InsertPeriods operation middleware
func (siw *ServerInterfaceWrapper) InsertPeriods(c *gin.Context) {

	var err error

	// ------------- Path parameter "calendar-id" -------------
	var calendarId string

	err = runtime.BindStyledParameter("simple", false, "calendar-id", c.Param("calendar-id"), &calendarId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter calendar-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.InsertPeriods(c, calendarId)
}

// RegisterHandlerGetAllCalendars creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAllCalendars(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAllCalendars(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAllCalendars creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAllCalendars(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAllCalendars)

	router.GET("/admin/master-tables/calendars", m...)

	return router
}

// RegisterHandlerInsertCalendars creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerInsertCalendars(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresInsertCalendars(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresInsertCalendars creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresInsertCalendars(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.InsertCalendars)

	router.POST("/admin/master-tables/calendars", m...)

	return router
}

// RegisterHandlerDeletePeriod creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeletePeriod(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeletePeriod(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeletePeriod creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeletePeriod(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeletePeriod)

	router.DELETE("/admin/master-tables/calendars/periods/:period-id", m...)

	return router
}

// RegisterHandlerGetPeriod creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetPeriod(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetPeriod(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetPeriod creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetPeriod(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetPeriod)

	router.GET("/admin/master-tables/calendars/periods/:period-id", m...)

	return router
}

// RegisterHandlerModifyPeriodCalendar creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerModifyPeriodCalendar(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresModifyPeriodCalendar(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresModifyPeriodCalendar creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresModifyPeriodCalendar(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.ModifyPeriodCalendar)

	router.PUT("/admin/master-tables/calendars/periods/:period-id", m...)

	return router
}

// RegisterHandlerDeleteCalendar creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeleteCalendar(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeleteCalendar(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeleteCalendar creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeleteCalendar(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeleteCalendar)

	router.DELETE("/admin/master-tables/calendars/:calendar-id", m...)

	return router
}

// RegisterHandlerGetCalendar creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetCalendar(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetCalendar(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetCalendar creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetCalendar(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetCalendar)

	router.GET("/admin/master-tables/calendars/:calendar-id", m...)

	return router
}

// RegisterHandlerModifyCalendar creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerModifyCalendar(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresModifyCalendar(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresModifyCalendar creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresModifyCalendar(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.ModifyCalendar)

	router.PUT("/admin/master-tables/calendars/:calendar-id", m...)

	return router
}

// RegisterHandlerGetAllPeriodsCalendars creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAllPeriodsCalendars(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAllPeriodsCalendars(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAllPeriodsCalendars creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAllPeriodsCalendars(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAllPeriodsCalendars)

	router.GET("/admin/master-tables/calendars/:calendar-id/periods", m...)

	return router
}

// RegisterHandlerInsertPeriods creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerInsertPeriods(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresInsertPeriods(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresInsertPeriods creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresInsertPeriods(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.InsertPeriods)

	router.POST("/admin/master-tables/calendars/:calendar-id/periods", m...)

	return router
}
