// Package geographic provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package geographic

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all geographic zones
	// (GET /admin/master-tables/geographic-zones)
	GetAllGeographicZones(ctx *gin.Context, params GetAllGeographicZonesParams)
	// Insert geographic zone
	// (POST /admin/master-tables/geographic-zones)
	InsertGeographicZone(ctx *gin.Context)
	// Delete all geographic zones
	// (DELETE /admin/master-tables/geographic-zones/{geographic-id})
	DeleteGeographicZone(ctx *gin.Context, geographicId string)
	// Get geographic zone
	// (GET /admin/master-tables/geographic-zones/{geographic-id})
	GetGeographicZone(ctx *gin.Context, geographicId string)
	// Modify all geographic zones
	// (PUT /admin/master-tables/geographic-zones/{geographic-id})
	ModifyGeographicZone(ctx *gin.Context, geographicId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// GetAllGeographicZones operation middleware
func (siw *ServerInterfaceWrapper) GetAllGeographicZones(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllGeographicZonesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "q" -------------
	if paramValue := c.Query("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter q: %s", err)})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	siw.Handler.GetAllGeographicZones(c, params)
}

// InsertGeographicZone operation middleware
func (siw *ServerInterfaceWrapper) InsertGeographicZone(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.InsertGeographicZone(c)
}

// DeleteGeographicZone operation middleware
func (siw *ServerInterfaceWrapper) DeleteGeographicZone(c *gin.Context) {

	var err error

	// ------------- Path parameter "geographic-id" -------------
	var geographicId string

	err = runtime.BindStyledParameter("simple", false, "geographic-id", c.Param("geographic-id"), &geographicId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter geographic-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeleteGeographicZone(c, geographicId)
}

// GetGeographicZone operation middleware
func (siw *ServerInterfaceWrapper) GetGeographicZone(c *gin.Context) {

	var err error

	// ------------- Path parameter "geographic-id" -------------
	var geographicId string

	err = runtime.BindStyledParameter("simple", false, "geographic-id", c.Param("geographic-id"), &geographicId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter geographic-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetGeographicZone(c, geographicId)
}

// ModifyGeographicZone operation middleware
func (siw *ServerInterfaceWrapper) ModifyGeographicZone(c *gin.Context) {

	var err error

	// ------------- Path parameter "geographic-id" -------------
	var geographicId string

	err = runtime.BindStyledParameter("simple", false, "geographic-id", c.Param("geographic-id"), &geographicId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter geographic-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.ModifyGeographicZone(c, geographicId)
}

// RegisterHandlerGetAllGeographicZones creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAllGeographicZones(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAllGeographicZones(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAllGeographicZones creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAllGeographicZones(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAllGeographicZones)

	router.GET("/admin/master-tables/geographic-zones", m...)

	return router
}

// RegisterHandlerInsertGeographicZone creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerInsertGeographicZone(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresInsertGeographicZone(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresInsertGeographicZone creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresInsertGeographicZone(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.InsertGeographicZone)

	router.POST("/admin/master-tables/geographic-zones", m...)

	return router
}

// RegisterHandlerDeleteGeographicZone creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeleteGeographicZone(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeleteGeographicZone(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeleteGeographicZone creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeleteGeographicZone(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeleteGeographicZone)

	router.DELETE("/admin/master-tables/geographic-zones/:geographic-id", m...)

	return router
}

// RegisterHandlerGetGeographicZone creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetGeographicZone(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetGeographicZone(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetGeographicZone creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetGeographicZone(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetGeographicZone)

	router.GET("/admin/master-tables/geographic-zones/:geographic-id", m...)

	return router
}

// RegisterHandlerModifyGeographicZone creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerModifyGeographicZone(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresModifyGeographicZone(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresModifyGeographicZone creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresModifyGeographicZone(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.ModifyGeographicZone)

	router.PUT("/admin/master-tables/geographic-zones/:geographic-id", m...)

	return router
}
