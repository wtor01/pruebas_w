// Package tariff provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package tariff

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all Tariffs
	// (GET /admin/master-tables/tariffs)
	GetAllTariffs(ctx *gin.Context, params GetAllTariffsParams)
	// Insert tariffs
	// (POST /admin/master-tables/tariffs)
	InsertTariffs(ctx *gin.Context)
	// Get tariff calendar
	// (GET /admin/master-tables/tariffs/tariffs-calendars/{tariff-id})
	GetTariffsCalendar(ctx *gin.Context, tariffId string, params GetTariffsCalendarParams)
	// Delete all tariff
	// (DELETE /admin/master-tables/tariffs/{tariff-id})
	DeleteTariff(ctx *gin.Context, tariffId string)
	// Get tariffs
	// (GET /admin/master-tables/tariffs/{tariff-id})
	GetTariffs(ctx *gin.Context, tariffId string)
	// Modify all tariffs
	// (PUT /admin/master-tables/tariffs/{tariff-id})
	ModifyTariffs(ctx *gin.Context, tariffId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// GetAllTariffs operation middleware
func (siw *ServerInterfaceWrapper) GetAllTariffs(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllTariffsParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "q" -------------
	if paramValue := c.Query("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter q: %s", err)})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	siw.Handler.GetAllTariffs(c, params)
}

// InsertTariffs operation middleware
func (siw *ServerInterfaceWrapper) InsertTariffs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.InsertTariffs(c)
}

// GetTariffsCalendar operation middleware
func (siw *ServerInterfaceWrapper) GetTariffsCalendar(c *gin.Context) {

	var err error

	// ------------- Path parameter "tariff-id" -------------
	var tariffId string

	err = runtime.BindStyledParameter("simple", false, "tariff-id", c.Param("tariff-id"), &tariffId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tariff-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTariffsCalendarParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "q" -------------
	if paramValue := c.Query("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter q: %s", err)})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	siw.Handler.GetTariffsCalendar(c, tariffId, params)
}

// DeleteTariff operation middleware
func (siw *ServerInterfaceWrapper) DeleteTariff(c *gin.Context) {

	var err error

	// ------------- Path parameter "tariff-id" -------------
	var tariffId string

	err = runtime.BindStyledParameter("simple", false, "tariff-id", c.Param("tariff-id"), &tariffId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tariff-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeleteTariff(c, tariffId)
}

// GetTariffs operation middleware
func (siw *ServerInterfaceWrapper) GetTariffs(c *gin.Context) {

	var err error

	// ------------- Path parameter "tariff-id" -------------
	var tariffId string

	err = runtime.BindStyledParameter("simple", false, "tariff-id", c.Param("tariff-id"), &tariffId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tariff-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetTariffs(c, tariffId)
}

// ModifyTariffs operation middleware
func (siw *ServerInterfaceWrapper) ModifyTariffs(c *gin.Context) {

	var err error

	// ------------- Path parameter "tariff-id" -------------
	var tariffId string

	err = runtime.BindStyledParameter("simple", false, "tariff-id", c.Param("tariff-id"), &tariffId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter tariff-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.ModifyTariffs(c, tariffId)
}

// RegisterHandlerGetAllTariffs creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAllTariffs(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAllTariffs(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAllTariffs creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAllTariffs(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAllTariffs)

	router.GET("/admin/master-tables/tariffs", m...)

	return router
}

// RegisterHandlerInsertTariffs creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerInsertTariffs(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresInsertTariffs(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresInsertTariffs creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresInsertTariffs(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.InsertTariffs)

	router.POST("/admin/master-tables/tariffs", m...)

	return router
}

// RegisterHandlerGetTariffsCalendar creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetTariffsCalendar(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetTariffsCalendar(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetTariffsCalendar creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetTariffsCalendar(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetTariffsCalendar)

	router.GET("/admin/master-tables/tariffs/tariffs-calendars/:tariff-id", m...)

	return router
}

// RegisterHandlerDeleteTariff creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeleteTariff(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeleteTariff(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeleteTariff creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeleteTariff(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeleteTariff)

	router.DELETE("/admin/master-tables/tariffs/:tariff-id", m...)

	return router
}

// RegisterHandlerGetTariffs creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetTariffs(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetTariffs(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetTariffs creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetTariffs(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetTariffs)

	router.GET("/admin/master-tables/tariffs/:tariff-id", m...)

	return router
}

// RegisterHandlerModifyTariffs creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerModifyTariffs(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresModifyTariffs(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresModifyTariffs creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresModifyTariffs(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.ModifyTariffs)

	router.PUT("/admin/master-tables/tariffs/:tariff-id", m...)

	return router
}
