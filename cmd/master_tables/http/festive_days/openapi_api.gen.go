// Package festive_days provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package festive_days

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all festive days
	// (GET /admin/master-tables/festive-days)
	ListFestiveDays(ctx *gin.Context, params ListFestiveDaysParams)
	// Post festive day
	// (POST /admin/master-tables/festive-days)
	PostFestiveDay(ctx *gin.Context)
	// Delete festive day
	// (DELETE /admin/master-tables/festive-days/{festive-days_id})
	DeleteFestiveDay(ctx *gin.Context, festiveDaysId string)
	// Get festive day by id
	// (GET /admin/master-tables/festive-days/{festive-days_id})
	GetFestiveDay(ctx *gin.Context, festiveDaysId string)
	// Put festive day
	// (PUT /admin/master-tables/festive-days/{festive-days_id})
	PutFestiveDay(ctx *gin.Context, festiveDaysId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// ListFestiveDays operation middleware
func (siw *ServerInterfaceWrapper) ListFestiveDays(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFestiveDaysParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "q" -------------
	if paramValue := c.Query("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter q: %s", err)})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	siw.Handler.ListFestiveDays(c, params)
}

// PostFestiveDay operation middleware
func (siw *ServerInterfaceWrapper) PostFestiveDay(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.PostFestiveDay(c)
}

// DeleteFestiveDay operation middleware
func (siw *ServerInterfaceWrapper) DeleteFestiveDay(c *gin.Context) {

	var err error

	// ------------- Path parameter "festive-days_id" -------------
	var festiveDaysId string

	err = runtime.BindStyledParameter("simple", false, "festive-days_id", c.Param("festive-days_id"), &festiveDaysId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter festive-days_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeleteFestiveDay(c, festiveDaysId)
}

// GetFestiveDay operation middleware
func (siw *ServerInterfaceWrapper) GetFestiveDay(c *gin.Context) {

	var err error

	// ------------- Path parameter "festive-days_id" -------------
	var festiveDaysId string

	err = runtime.BindStyledParameter("simple", false, "festive-days_id", c.Param("festive-days_id"), &festiveDaysId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter festive-days_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetFestiveDay(c, festiveDaysId)
}

// PutFestiveDay operation middleware
func (siw *ServerInterfaceWrapper) PutFestiveDay(c *gin.Context) {

	var err error

	// ------------- Path parameter "festive-days_id" -------------
	var festiveDaysId string

	err = runtime.BindStyledParameter("simple", false, "festive-days_id", c.Param("festive-days_id"), &festiveDaysId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter festive-days_id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.PutFestiveDay(c, festiveDaysId)
}

// RegisterHandlerListFestiveDays creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerListFestiveDays(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresListFestiveDays(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresListFestiveDays creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresListFestiveDays(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.ListFestiveDays)

	router.GET("/admin/master-tables/festive-days", m...)

	return router
}

// RegisterHandlerPostFestiveDay creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerPostFestiveDay(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresPostFestiveDay(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresPostFestiveDay creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresPostFestiveDay(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.PostFestiveDay)

	router.POST("/admin/master-tables/festive-days", m...)

	return router
}

// RegisterHandlerDeleteFestiveDay creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeleteFestiveDay(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeleteFestiveDay(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeleteFestiveDay creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeleteFestiveDay(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeleteFestiveDay)

	router.DELETE("/admin/master-tables/festive-days/:festive-days_id", m...)

	return router
}

// RegisterHandlerGetFestiveDay creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetFestiveDay(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetFestiveDay(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetFestiveDay creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetFestiveDay(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetFestiveDay)

	router.GET("/admin/master-tables/festive-days/:festive-days_id", m...)

	return router
}

// RegisterHandlerPutFestiveDay creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerPutFestiveDay(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresPutFestiveDay(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresPutFestiveDay creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresPutFestiveDay(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.PutFestiveDay)

	router.PUT("/admin/master-tables/festive-days/:festive-days_id", m...)

	return router
}
