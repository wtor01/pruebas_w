// Package seasons provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package seasons

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all seasons
	// (GET /admin/master-tables/seasons)
	GetAllSeasons(ctx *gin.Context, params GetAllSeasonsParams)
	// Insert seasons
	// (POST /admin/master-tables/seasons)
	InsertSeason(ctx *gin.Context)
	// Delete day type
	// (DELETE /admin/master-tables/seasons/day_types/{day-type-id})
	DeleteDayType(ctx *gin.Context, dayTypeId string)
	// Get day type
	// (GET /admin/master-tables/seasons/day_types/{day-type-id})
	GetDayType(ctx *gin.Context, dayTypeId string)
	// Modify day type
	// (PUT /admin/master-tables/seasons/day_types/{day-type-id})
	ModifyDayType(ctx *gin.Context, dayTypeId string)
	// Delete season
	// (DELETE /admin/master-tables/seasons/{season-id})
	DeleteSeason(ctx *gin.Context, seasonId string)
	// Get season
	// (GET /admin/master-tables/seasons/{season-id})
	GetSeason(ctx *gin.Context, seasonId string)
	// Modify a season
	// (PUT /admin/master-tables/seasons/{season-id})
	ModifySeason(ctx *gin.Context, seasonId string)
	// Get all day types
	// (GET /admin/master-tables/seasons/{season-id}/day_types)
	GetAllDayTypes(ctx *gin.Context, seasonId string, params GetAllDayTypesParams)
	// Insert day type
	// (POST /admin/master-tables/seasons/{season-id}/day_types)
	InsertDayType(ctx *gin.Context, seasonId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []gin.HandlerFunc
}

// GetAllSeasons operation middleware
func (siw *ServerInterfaceWrapper) GetAllSeasons(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllSeasonsParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "q" -------------
	if paramValue := c.Query("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter q: %s", err)})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	siw.Handler.GetAllSeasons(c, params)
}

// InsertSeason operation middleware
func (siw *ServerInterfaceWrapper) InsertSeason(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.InsertSeason(c)
}

// DeleteDayType operation middleware
func (siw *ServerInterfaceWrapper) DeleteDayType(c *gin.Context) {

	var err error

	// ------------- Path parameter "day-type-id" -------------
	var dayTypeId string

	err = runtime.BindStyledParameter("simple", false, "day-type-id", c.Param("day-type-id"), &dayTypeId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter day-type-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeleteDayType(c, dayTypeId)
}

// GetDayType operation middleware
func (siw *ServerInterfaceWrapper) GetDayType(c *gin.Context) {

	var err error

	// ------------- Path parameter "day-type-id" -------------
	var dayTypeId string

	err = runtime.BindStyledParameter("simple", false, "day-type-id", c.Param("day-type-id"), &dayTypeId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter day-type-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetDayType(c, dayTypeId)
}

// ModifyDayType operation middleware
func (siw *ServerInterfaceWrapper) ModifyDayType(c *gin.Context) {

	var err error

	// ------------- Path parameter "day-type-id" -------------
	var dayTypeId string

	err = runtime.BindStyledParameter("simple", false, "day-type-id", c.Param("day-type-id"), &dayTypeId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter day-type-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.ModifyDayType(c, dayTypeId)
}

// DeleteSeason operation middleware
func (siw *ServerInterfaceWrapper) DeleteSeason(c *gin.Context) {

	var err error

	// ------------- Path parameter "season-id" -------------
	var seasonId string

	err = runtime.BindStyledParameter("simple", false, "season-id", c.Param("season-id"), &seasonId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter season-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.DeleteSeason(c, seasonId)
}

// GetSeason operation middleware
func (siw *ServerInterfaceWrapper) GetSeason(c *gin.Context) {

	var err error

	// ------------- Path parameter "season-id" -------------
	var seasonId string

	err = runtime.BindStyledParameter("simple", false, "season-id", c.Param("season-id"), &seasonId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter season-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.GetSeason(c, seasonId)
}

// ModifySeason operation middleware
func (siw *ServerInterfaceWrapper) ModifySeason(c *gin.Context) {

	var err error

	// ------------- Path parameter "season-id" -------------
	var seasonId string

	err = runtime.BindStyledParameter("simple", false, "season-id", c.Param("season-id"), &seasonId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter season-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.ModifySeason(c, seasonId)
}

// GetAllDayTypes operation middleware
func (siw *ServerInterfaceWrapper) GetAllDayTypes(c *gin.Context) {

	var err error

	// ------------- Path parameter "season-id" -------------
	var seasonId string

	err = runtime.BindStyledParameter("simple", false, "season-id", c.Param("season-id"), &seasonId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter season-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllDayTypesParams

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	// ------------- Required query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument limit is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "q" -------------
	if paramValue := c.Query("q"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter q: %s", err)})
		return
	}

	// ------------- Optional query parameter "sort" -------------
	if paramValue := c.Query("sort"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter sort: %s", err)})
		return
	}

	siw.Handler.GetAllDayTypes(c, seasonId, params)
}

// InsertDayType operation middleware
func (siw *ServerInterfaceWrapper) InsertDayType(c *gin.Context) {

	var err error

	// ------------- Path parameter "season-id" -------------
	var seasonId string

	err = runtime.BindStyledParameter("simple", false, "season-id", c.Param("season-id"), &seasonId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter season-id: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	siw.Handler.InsertDayType(c, seasonId)
}

// RegisterHandlerGetAllSeasons creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAllSeasons(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAllSeasons(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAllSeasons creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAllSeasons(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAllSeasons)

	router.GET("/admin/master-tables/seasons", m...)

	return router
}

// RegisterHandlerInsertSeason creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerInsertSeason(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresInsertSeason(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresInsertSeason creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresInsertSeason(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.InsertSeason)

	router.POST("/admin/master-tables/seasons", m...)

	return router
}

// RegisterHandlerDeleteDayType creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeleteDayType(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeleteDayType(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeleteDayType creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeleteDayType(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeleteDayType)

	router.DELETE("/admin/master-tables/seasons/day_types/:day-type-id", m...)

	return router
}

// RegisterHandlerGetDayType creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetDayType(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetDayType(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetDayType creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetDayType(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetDayType)

	router.GET("/admin/master-tables/seasons/day_types/:day-type-id", m...)

	return router
}

// RegisterHandlerModifyDayType creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerModifyDayType(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresModifyDayType(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresModifyDayType creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresModifyDayType(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.ModifyDayType)

	router.PUT("/admin/master-tables/seasons/day_types/:day-type-id", m...)

	return router
}

// RegisterHandlerDeleteSeason creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerDeleteSeason(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresDeleteSeason(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresDeleteSeason creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresDeleteSeason(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.DeleteSeason)

	router.DELETE("/admin/master-tables/seasons/:season-id", m...)

	return router
}

// RegisterHandlerGetSeason creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetSeason(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetSeason(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetSeason creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetSeason(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetSeason)

	router.GET("/admin/master-tables/seasons/:season-id", m...)

	return router
}

// RegisterHandlerModifySeason creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerModifySeason(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresModifySeason(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresModifySeason creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresModifySeason(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.ModifySeason)

	router.PUT("/admin/master-tables/seasons/:season-id", m...)

	return router
}

// RegisterHandlerGetAllDayTypes creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerGetAllDayTypes(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresGetAllDayTypes(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresGetAllDayTypes creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresGetAllDayTypes(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.GetAllDayTypes)

	router.GET("/admin/master-tables/seasons/:season-id/day_types", m...)

	return router
}

// RegisterHandlerInsertDayType creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlerInsertDayType(router *gin.RouterGroup, si ServerInterface) *gin.RouterGroup {
	return RegisterHandlerWithMiddlewaresInsertDayType(router, si, []gin.HandlerFunc{})
}

// RegisterHandlerWithMiddlewaresInsertDayType creates http.Handler with additional options
func RegisterHandlerWithMiddlewaresInsertDayType(router *gin.RouterGroup, si ServerInterface, middlewares []gin.HandlerFunc) *gin.RouterGroup {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: middlewares,
	}

	m := append(middlewares, wrapper.InsertDayType)

	router.POST("/admin/master-tables/seasons/:season-id/day_types", m...)

	return router
}
