// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	scheduler "bitbucket.org/sercide/data-ingestion/pkg/scheduler"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateJob provides a mock function with given fields: ctx, s, topic
func (_m *Client) CreateJob(ctx context.Context, s scheduler.Scheduler, topic string) (string, error) {
	ret := _m.Called(ctx, s, topic)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, scheduler.Scheduler, string) string); ok {
		r0 = rf(ctx, s, topic)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, scheduler.Scheduler, string) error); ok {
		r1 = rf(ctx, s, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: ctx, id
func (_m *Client) DeleteJob(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateJob provides a mock function with given fields: ctx, s, topic
func (_m *Client) UpdateJob(ctx context.Context, s scheduler.Scheduler, topic string) error {
	ret := _m.Called(ctx, s, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, scheduler.Scheduler, string) error); ok {
		r0 = rf(ctx, s, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClient creates a new instance of Client. It also registers a cleanup function to assert the mocks expectations.
func NewClient(t testing.TB) *Client {
	mock := &Client{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
