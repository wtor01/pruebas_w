// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	billing_measures "bitbucket.org/sercide/data-ingestion/internal/billing_measures"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ConsumProfileRepository is an autogenerated mock type for the ConsumProfileRepository type
type ConsumProfileRepository struct {
	mock.Mock
}

// Save provides a mock function with given fields: ctx, profile
func (_m *ConsumProfileRepository) Save(ctx context.Context, profile billing_measures.ConsumProfile) error {
	ret := _m.Called(ctx, profile)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.ConsumProfile) error); ok {
		r0 = rf(ctx, profile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, q
func (_m *ConsumProfileRepository) Search(ctx context.Context, q billing_measures.QueryConsumProfile) ([]billing_measures.ConsumProfile, error) {
	ret := _m.Called(ctx, q)

	var r0 []billing_measures.ConsumProfile
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.QueryConsumProfile) []billing_measures.ConsumProfile); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]billing_measures.ConsumProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.QueryConsumProfile) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsumProfileRepository creates a new instance of ConsumProfileRepository. It also registers a cleanup function to assert the mocks expectations.
func NewConsumProfileRepository(t testing.TB) *ConsumProfileRepository {
	mock := &ConsumProfileRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
