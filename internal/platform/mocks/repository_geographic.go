// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	geographic "bitbucket.org/sercide/data-ingestion/internal/master_tables/geographic"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// RepositoryGeographic is an autogenerated mock type for the RepositoryGeographic type
type RepositoryGeographic struct {
	mock.Mock
}

// DeleteGeographicZone provides a mock function with given fields: ctx, code
func (_m *RepositoryGeographic) DeleteGeographicZone(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllGeographicZones provides a mock function with given fields: ctx, search
func (_m *RepositoryGeographic) GetAllGeographicZones(ctx context.Context, search geographic.Search) ([]geographic.GeographicZones, int, error) {
	ret := _m.Called(ctx, search)

	var r0 []geographic.GeographicZones
	if rf, ok := ret.Get(0).(func(context.Context, geographic.Search) []geographic.GeographicZones); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]geographic.GeographicZones)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, geographic.Search) int); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, geographic.Search) error); ok {
		r2 = rf(ctx, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGeographicZone provides a mock function with given fields: ctx, code
func (_m *RepositoryGeographic) GetGeographicZone(ctx context.Context, code string) (geographic.GeographicZones, error) {
	ret := _m.Called(ctx, code)

	var r0 geographic.GeographicZones
	if rf, ok := ret.Get(0).(func(context.Context, string) geographic.GeographicZones); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(geographic.GeographicZones)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertGeographicZone provides a mock function with given fields: ctx, zones
func (_m *RepositoryGeographic) InsertGeographicZone(ctx context.Context, zones geographic.GeographicZones) error {
	ret := _m.Called(ctx, zones)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, geographic.GeographicZones) error); ok {
		r0 = rf(ctx, zones)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyGeographicZone provides a mock function with given fields: ctx, code, zones
func (_m *RepositoryGeographic) ModifyGeographicZone(ctx context.Context, code string, zones geographic.GeographicZones) error {
	ret := _m.Called(ctx, code, zones)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, geographic.GeographicZones) error); ok {
		r0 = rf(ctx, code, zones)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryGeographic creates a new instance of RepositoryGeographic. It also registers a cleanup function to assert the mocks expectations.
func NewRepositoryGeographic(t testing.TB) *RepositoryGeographic {
	mock := &RepositoryGeographic{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
