// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gross_measures "bitbucket.org/sercide/data-ingestion/internal/gross_measures"
	measures "bitbucket.org/sercide/data-ingestion/internal/measures"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// DashboardRepository is an autogenerated mock type for the DashboardRepository type
type DashboardRepository struct {
	mock.Mock
}

// GetDashboard provides a mock function with given fields: ctx, query
func (_m *DashboardRepository) GetDashboard(ctx context.Context, query gross_measures.GetDashboardQuery) ([]measures.DashboardMeasureI, error) {
	ret := _m.Called(ctx, query)

	var r0 []measures.DashboardMeasureI
	if rf, ok := ret.Get(0).(func(context.Context, gross_measures.GetDashboardQuery) []measures.DashboardMeasureI); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]measures.DashboardMeasureI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gross_measures.GetDashboardQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDashboardRepository creates a new instance of DashboardRepository. It also registers a cleanup function to assert the mocks expectations.
func NewDashboardRepository(t testing.TB) *DashboardRepository {
	mock := &DashboardRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
