// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	billing_measures "bitbucket.org/sercide/data-ingestion/internal/billing_measures"

	mock "github.com/stretchr/testify/mock"
)

// SelfConsumptionRepository is an autogenerated mock type for the SelfConsumptionRepository type
type SelfConsumptionRepository struct {
	mock.Mock
}

// GetActiveSelfConsumptionByCUP provides a mock function with given fields: ctx, query
func (_m *SelfConsumptionRepository) GetActiveSelfConsumptionByCUP(ctx context.Context, query billing_measures.QueryGetActiveSelfConsumptionByCUP) (billing_measures.SelfConsumption, error) {
	ret := _m.Called(ctx, query)

	var r0 billing_measures.SelfConsumption
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.QueryGetActiveSelfConsumptionByCUP) billing_measures.SelfConsumption); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(billing_measures.SelfConsumption)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.QueryGetActiveSelfConsumptionByCUP) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSelfConsumptionActiveByDistributor provides a mock function with given fields: ctx, query
func (_m *SelfConsumptionRepository) GetSelfConsumptionActiveByDistributor(ctx context.Context, query billing_measures.GetSelfConsumptionByDistributortDto) ([]billing_measures.SelfConsumption, int, error) {
	ret := _m.Called(ctx, query)

	var r0 []billing_measures.SelfConsumption
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.GetSelfConsumptionByDistributortDto) []billing_measures.SelfConsumption); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]billing_measures.SelfConsumption)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.GetSelfConsumptionByDistributortDto) int); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, billing_measures.GetSelfConsumptionByDistributortDto) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSelfConsumptionByCUP provides a mock function with given fields: ctx, query
func (_m *SelfConsumptionRepository) GetSelfConsumptionByCUP(ctx context.Context, query billing_measures.GetSelfConsumptionByCUP) (billing_measures.SelfConsumption, error) {
	ret := _m.Called(ctx, query)

	var r0 billing_measures.SelfConsumption
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.GetSelfConsumptionByCUP) billing_measures.SelfConsumption); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(billing_measures.SelfConsumption)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.GetSelfConsumptionByCUP) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSelfConsumptionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSelfConsumptionRepository creates a new instance of SelfConsumptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSelfConsumptionRepository(t mockConstructorTestingTNewSelfConsumptionRepository) *SelfConsumptionRepository {
	mock := &SelfConsumptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
