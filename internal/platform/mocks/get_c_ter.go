// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	smarkia "bitbucket.org/sercide/data-ingestion/internal/gross_measures/smarkia"
	mock "github.com/stretchr/testify/mock"
)

// GetCTer is an autogenerated mock type for the GetCTer type
type GetCTer struct {
	mock.Mock
}

// GetCTs provides a mock function with given fields: ctx, distributorID
func (_m *GetCTer) GetCTs(ctx context.Context, distributorID string) ([]smarkia.Ct, error) {
	ret := _m.Called(ctx, distributorID)

	var r0 []smarkia.Ct
	if rf, ok := ret.Get(0).(func(context.Context, string) []smarkia.Ct); ok {
		r0 = rf(ctx, distributorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]smarkia.Ct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, distributorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGetCTer interface {
	mock.TestingT
	Cleanup(func())
}

// NewGetCTer creates a new instance of GetCTer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGetCTer(t mockConstructorTestingTNewGetCTer) *GetCTer {
	mock := &GetCTer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
