// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	measures "bitbucket.org/sercide/data-ingestion/internal/measures"
	mock "github.com/stretchr/testify/mock"
)

// InventoryRepository is an autogenerated mock type for the InventoryRepository type
type InventoryRepository struct {
	mock.Mock
}

// CountMeterConfigByDate provides a mock function with given fields: ctx, query
func (_m *InventoryRepository) CountMeterConfigByDate(ctx context.Context, query measures.ListMeterConfigByDateQuery) (int, error) {
	ret := _m.Called(ctx, query)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, measures.ListMeterConfigByDateQuery) int); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.ListMeterConfigByDateQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeterConfigByCups provides a mock function with given fields: ctx, query
func (_m *InventoryRepository) GetMeterConfigByCups(ctx context.Context, query measures.GetMeterConfigByCupsQuery) (measures.MeterConfig, error) {
	ret := _m.Called(ctx, query)

	var r0 measures.MeterConfig
	if rf, ok := ret.Get(0).(func(context.Context, measures.GetMeterConfigByCupsQuery) measures.MeterConfig); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(measures.MeterConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.GetMeterConfigByCupsQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeterConfigByCupsAPI provides a mock function with given fields: ctx, query
func (_m *InventoryRepository) GetMeterConfigByCupsAPI(ctx context.Context, query measures.GetMeterConfigByCupsQuery) (measures.MeterConfig, error) {
	ret := _m.Called(ctx, query)

	var r0 measures.MeterConfig
	if rf, ok := ret.Get(0).(func(context.Context, measures.GetMeterConfigByCupsQuery) measures.MeterConfig); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(measures.MeterConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.GetMeterConfigByCupsQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeterConfigByMeter provides a mock function with given fields: ctx, query
func (_m *InventoryRepository) GetMeterConfigByMeter(ctx context.Context, query measures.GetMeterConfigByMeterQuery) (measures.MeterConfig, error) {
	ret := _m.Called(ctx, query)

	var r0 measures.MeterConfig
	if rf, ok := ret.Get(0).(func(context.Context, measures.GetMeterConfigByMeterQuery) measures.MeterConfig); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(measures.MeterConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.GetMeterConfigByMeterQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetersAndCountByDistributorId provides a mock function with given fields: ctx, query
func (_m *InventoryRepository) GetMetersAndCountByDistributorId(ctx context.Context, query measures.GetMetersAndCountByDistributorIdQuery) (measures.GetMetersAndCountResult, error) {
	ret := _m.Called(ctx, query)

	var r0 measures.GetMetersAndCountResult
	if rf, ok := ret.Get(0).(func(context.Context, measures.GetMetersAndCountByDistributorIdQuery) measures.GetMetersAndCountResult); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(measures.GetMetersAndCountResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.GetMetersAndCountByDistributorIdQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupMetersByType provides a mock function with given fields: ctx, query
func (_m *InventoryRepository) GroupMetersByType(ctx context.Context, query measures.GroupMetersByTypeQuery) (map[measures.MeterType]map[measures.RegisterType]measures.MeasureCount, error) {
	ret := _m.Called(ctx, query)

	var r0 map[measures.MeterType]map[measures.RegisterType]measures.MeasureCount
	if rf, ok := ret.Get(0).(func(context.Context, measures.GroupMetersByTypeQuery) map[measures.MeterType]map[measures.RegisterType]measures.MeasureCount); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[measures.MeterType]map[measures.RegisterType]measures.MeasureCount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.GroupMetersByTypeQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMeterConfigByCups provides a mock function with given fields: ctx, query
func (_m *InventoryRepository) ListMeterConfigByCups(ctx context.Context, query measures.ListMeterConfigByCups) ([]measures.MeterConfig, error) {
	ret := _m.Called(ctx, query)

	var r0 []measures.MeterConfig
	if rf, ok := ret.Get(0).(func(context.Context, measures.ListMeterConfigByCups) []measures.MeterConfig); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]measures.MeterConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.ListMeterConfigByCups) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMeterConfigByDate provides a mock function with given fields: ctx, query
func (_m *InventoryRepository) ListMeterConfigByDate(ctx context.Context, query measures.ListMeterConfigByDateQuery) ([]measures.MeterConfig, error) {
	ret := _m.Called(ctx, query)

	var r0 []measures.MeterConfig
	if rf, ok := ret.Get(0).(func(context.Context, measures.ListMeterConfigByDateQuery) []measures.MeterConfig); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]measures.MeterConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.ListMeterConfigByDateQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInventoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewInventoryRepository creates a new instance of InventoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInventoryRepository(t mockConstructorTestingTNewInventoryRepository) *InventoryRepository {
	mock := &InventoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
