// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	aggregations "bitbucket.org/sercide/data-ingestion/internal/aggregations"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// AggregationMongoRepository is an autogenerated mock type for the AggregationMongoRepository type
type AggregationMongoRepository struct {
	mock.Mock
}

// GetAggregation provides a mock function with given fields: ctx, params
func (_m *AggregationMongoRepository) GetAggregation(ctx context.Context, params aggregations.GetAggregationDto) (aggregations.Aggregation, error) {
	ret := _m.Called(ctx, params)

	var r0 aggregations.Aggregation
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.GetAggregationDto) aggregations.Aggregation); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(aggregations.Aggregation)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, aggregations.GetAggregationDto) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregations provides a mock function with given fields: ctx, params
func (_m *AggregationMongoRepository) GetAggregations(ctx context.Context, params aggregations.GetAggregationsDto) ([]aggregations.Aggregation, int64, error) {
	ret := _m.Called(ctx, params)

	var r0 []aggregations.Aggregation
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.GetAggregationsDto) []aggregations.Aggregation); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aggregations.Aggregation)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, aggregations.GetAggregationsDto) int64); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, aggregations.GetAggregationsDto) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPreviousAggregation provides a mock function with given fields: ctx, params
func (_m *AggregationMongoRepository) GetPreviousAggregation(ctx context.Context, params aggregations.GetAggregationDto) (aggregations.AggregationPrevious, error) {
	ret := _m.Called(ctx, params)

	var r0 aggregations.AggregationPrevious
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.GetAggregationDto) aggregations.AggregationPrevious); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(aggregations.AggregationPrevious)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, aggregations.GetAggregationDto) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAggregationMongoRepository creates a new instance of AggregationMongoRepository. It also registers a cleanup function to assert the mocks expectations.
func NewAggregationMongoRepository(t testing.TB) *AggregationMongoRepository {
	mock := &AggregationMongoRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
