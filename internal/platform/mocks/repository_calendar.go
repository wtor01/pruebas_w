// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	calendar "bitbucket.org/sercide/data-ingestion/internal/master_tables/calendar"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/satori/go.uuid"
)

// RepositoryCalendar is an autogenerated mock type for the RepositoryCalendar type
type RepositoryCalendar struct {
	mock.Mock
}

// DeleteCalendar provides a mock function with given fields: ctx, calendarId
func (_m *RepositoryCalendar) DeleteCalendar(ctx context.Context, calendarId string) error {
	ret := _m.Called(ctx, calendarId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, calendarId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePeriod provides a mock function with given fields: ctx, code
func (_m *RepositoryCalendar) DeletePeriod(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCalendars provides a mock function with given fields: ctx, search
func (_m *RepositoryCalendar) GetAllCalendars(ctx context.Context, search calendar.Search) ([]calendar.Calendar, int, error) {
	ret := _m.Called(ctx, search)

	var r0 []calendar.Calendar
	if rf, ok := ret.Get(0).(func(context.Context, calendar.Search) []calendar.Calendar); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]calendar.Calendar)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, calendar.Search) int); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, calendar.Search) error); ok {
		r2 = rf(ctx, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllPeriodCalendars provides a mock function with given fields: ctx, code, search
func (_m *RepositoryCalendar) GetAllPeriodCalendars(ctx context.Context, code string, search calendar.Search) ([]calendar.PeriodCalendar, int, error) {
	ret := _m.Called(ctx, code, search)

	var r0 []calendar.PeriodCalendar
	if rf, ok := ret.Get(0).(func(context.Context, string, calendar.Search) []calendar.PeriodCalendar); ok {
		r0 = rf(ctx, code, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]calendar.PeriodCalendar)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, calendar.Search) int); ok {
		r1 = rf(ctx, code, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, calendar.Search) error); ok {
		r2 = rf(ctx, code, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCalendar provides a mock function with given fields: ctx, calendarId
func (_m *RepositoryCalendar) GetCalendar(ctx context.Context, calendarId string) (calendar.Calendar, error) {
	ret := _m.Called(ctx, calendarId)

	var r0 calendar.Calendar
	if rf, ok := ret.Get(0).(func(context.Context, string) calendar.Calendar); ok {
		r0 = rf(ctx, calendarId)
	} else {
		r0 = ret.Get(0).(calendar.Calendar)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, calendarId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeriodById provides a mock function with given fields: ctx, periodId
func (_m *RepositoryCalendar) GetPeriodById(ctx context.Context, periodId uuid.UUID) (calendar.PeriodCalendar, error) {
	ret := _m.Called(ctx, periodId)

	var r0 calendar.PeriodCalendar
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) calendar.PeriodCalendar); ok {
		r0 = rf(ctx, periodId)
	} else {
		r0 = ret.Get(0).(calendar.PeriodCalendar)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, periodId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeriodsActive provides a mock function with given fields: ctx
func (_m *RepositoryCalendar) GetPeriodsActive(ctx context.Context) ([]calendar.PeriodCalendar, error) {
	ret := _m.Called(ctx)

	var r0 []calendar.PeriodCalendar
	if rf, ok := ret.Get(0).(func(context.Context) []calendar.PeriodCalendar); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]calendar.PeriodCalendar)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeriodsByDate provides a mock function with given fields: ctx, calendarCode, date
func (_m *RepositoryCalendar) GetPeriodsByDate(ctx context.Context, calendarCode string, date time.Time) ([]calendar.PeriodCalendar, error) {
	ret := _m.Called(ctx, calendarCode, date)

	var r0 []calendar.PeriodCalendar
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) []calendar.PeriodCalendar); ok {
		r0 = rf(ctx, calendarCode, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]calendar.PeriodCalendar)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, calendarCode, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCalendars provides a mock function with given fields: ctx, _a1
func (_m *RepositoryCalendar) InsertCalendars(ctx context.Context, _a1 calendar.Calendar) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, calendar.Calendar) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertPeriod provides a mock function with given fields: ctx, code, period
func (_m *RepositoryCalendar) InsertPeriod(ctx context.Context, code string, period calendar.PeriodCalendar) error {
	ret := _m.Called(ctx, code, period)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, calendar.PeriodCalendar) error); ok {
		r0 = rf(ctx, code, period)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyCalendar provides a mock function with given fields: ctx, calendarId, zones
func (_m *RepositoryCalendar) ModifyCalendar(ctx context.Context, calendarId string, zones calendar.Calendar) error {
	ret := _m.Called(ctx, calendarId, zones)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, calendar.Calendar) error); ok {
		r0 = rf(ctx, calendarId, zones)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyPeriodicCalendar provides a mock function with given fields: ctx, code, period
func (_m *RepositoryCalendar) ModifyPeriodicCalendar(ctx context.Context, code string, period calendar.PeriodCalendar) error {
	ret := _m.Called(ctx, code, period)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, calendar.PeriodCalendar) error); ok {
		r0 = rf(ctx, code, period)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepositoryCalendar interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryCalendar creates a new instance of RepositoryCalendar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryCalendar(t mockConstructorTestingTNewRepositoryCalendar) *RepositoryCalendar {
	mock := &RepositoryCalendar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
