// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gross_measures "bitbucket.org/sercide/data-ingestion/internal/gross_measures"
	mock "github.com/stretchr/testify/mock"
)

// GrossMeasuresDashboardStatsRepository is an autogenerated mock type for the GrossMeasuresDashboardStatsRepository type
type GrossMeasuresDashboardStatsRepository struct {
	mock.Mock
}

// GetStatisticsGlobal provides a mock function with given fields: ctx, dto
func (_m *GrossMeasuresDashboardStatsRepository) GetStatisticsGlobal(ctx context.Context, dto gross_measures.SearchDashboardStats) ([]gross_measures.GrossMeasuresDashboardStatsGlobal, error) {
	ret := _m.Called(ctx, dto)

	var r0 []gross_measures.GrossMeasuresDashboardStatsGlobal
	if rf, ok := ret.Get(0).(func(context.Context, gross_measures.SearchDashboardStats) []gross_measures.GrossMeasuresDashboardStatsGlobal); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gross_measures.GrossMeasuresDashboardStatsGlobal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gross_measures.SearchDashboardStats) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGrossMeasuresStatisticsSerialNumber provides a mock function with given fields: ctx, q
func (_m *GrossMeasuresDashboardStatsRepository) ListGrossMeasuresStatisticsSerialNumber(ctx context.Context, q gross_measures.SearchDashboardSerialNumber) (gross_measures.ListGrossMeasuresStatisticsSerialNumberResult, error) {
	ret := _m.Called(ctx, q)

	var r0 gross_measures.ListGrossMeasuresStatisticsSerialNumberResult
	if rf, ok := ret.Get(0).(func(context.Context, gross_measures.SearchDashboardSerialNumber) gross_measures.ListGrossMeasuresStatisticsSerialNumberResult); ok {
		r0 = rf(ctx, q)
	} else {
		r0 = ret.Get(0).(gross_measures.ListGrossMeasuresStatisticsSerialNumberResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gross_measures.SearchDashboardSerialNumber) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGrossMeasuresDashboardStatsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGrossMeasuresDashboardStatsRepository creates a new instance of GrossMeasuresDashboardStatsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGrossMeasuresDashboardStatsRepository(t mockConstructorTestingTNewGrossMeasuresDashboardStatsRepository) *GrossMeasuresDashboardStatsRepository {
	mock := &GrossMeasuresDashboardStatsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
