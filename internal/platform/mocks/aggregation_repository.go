// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	aggregations "bitbucket.org/sercide/data-ingestion/internal/aggregations"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// AggregationRepository is an autogenerated mock type for the AggregationRepository type
type AggregationRepository struct {
	mock.Mock
}

// GenerateAggregation provides a mock function with given fields: ctx, query
func (_m *AggregationRepository) GenerateAggregation(ctx context.Context, query aggregations.ConfigScheduler) ([]aggregations.Aggregation, error) {
	ret := _m.Called(ctx, query)

	var r0 []aggregations.Aggregation
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.ConfigScheduler) []aggregations.Aggregation); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aggregations.Aggregation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, aggregations.ConfigScheduler) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAllAggregations provides a mock function with given fields: ctx, agg
func (_m *AggregationRepository) SaveAllAggregations(ctx context.Context, agg []aggregations.Aggregation) error {
	ret := _m.Called(ctx, agg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []aggregations.Aggregation) error); ok {
		r0 = rf(ctx, agg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAggregationRepository creates a new instance of AggregationRepository. It also registers a cleanup function to assert the mocks expectations.
func NewAggregationRepository(t testing.TB) *AggregationRepository {
	mock := &AggregationRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
