// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	db "bitbucket.org/sercide/data-ingestion/pkg/db"
	mock "github.com/stretchr/testify/mock"

	process_measures "bitbucket.org/sercide/data-ingestion/internal/process_measures"

	testing "testing"
)

// SchedulerRepository is an autogenerated mock type for the SchedulerRepository type
type SchedulerRepository struct {
	mock.Mock
}

// DeleteScheduler provides a mock function with given fields: ctx, id
func (_m *SchedulerRepository) DeleteScheduler(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetScheduler provides a mock function with given fields: ctx, id
func (_m *SchedulerRepository) GetScheduler(ctx context.Context, id string) (process_measures.Scheduler, error) {
	ret := _m.Called(ctx, id)

	var r0 process_measures.Scheduler
	if rf, ok := ret.Get(0).(func(context.Context, string) process_measures.Scheduler); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(process_measures.Scheduler)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListScheduler provides a mock function with given fields: ctx, query
func (_m *SchedulerRepository) ListScheduler(ctx context.Context, query db.Pagination) ([]process_measures.Scheduler, int, error) {
	ret := _m.Called(ctx, query)

	var r0 []process_measures.Scheduler
	if rf, ok := ret.Get(0).(func(context.Context, db.Pagination) []process_measures.Scheduler); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]process_measures.Scheduler)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, db.Pagination) int); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, db.Pagination) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveScheduler provides a mock function with given fields: ctx, s
func (_m *SchedulerRepository) SaveScheduler(ctx context.Context, s process_measures.Scheduler) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, process_measures.Scheduler) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchScheduler provides a mock function with given fields: ctx, search
func (_m *SchedulerRepository) SearchScheduler(ctx context.Context, search process_measures.SearchScheduler) ([]process_measures.Scheduler, error) {
	ret := _m.Called(ctx, search)

	var r0 []process_measures.Scheduler
	if rf, ok := ret.Get(0).(func(context.Context, process_measures.SearchScheduler) []process_measures.Scheduler); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]process_measures.Scheduler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, process_measures.SearchScheduler) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSchedulerRepository creates a new instance of SchedulerRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSchedulerRepository(t testing.TB) *SchedulerRepository {
	mock := &SchedulerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
