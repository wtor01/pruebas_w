// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	billing_measures "bitbucket.org/sercide/data-ingestion/internal/billing_measures"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// BillingMeasuresDashboardRepository is an autogenerated mock type for the BillingMeasuresDashboardRepository type
type BillingMeasuresDashboardRepository struct {
	mock.Mock
}

// GetBillingMeasuresTax provides a mock function with given fields: ctx, query
func (_m *BillingMeasuresDashboardRepository) GetBillingMeasuresTax(ctx context.Context, query billing_measures.QueryBillingMeasuresTax) (billing_measures.BillingMeasuresTaxResult, error) {
	ret := _m.Called(ctx, query)

	var r0 billing_measures.BillingMeasuresTaxResult
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.QueryBillingMeasuresTax) billing_measures.BillingMeasuresTaxResult); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(billing_measures.BillingMeasuresTaxResult)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.QueryBillingMeasuresTax) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupFiscalMeasureSummary provides a mock function with given fields: ctx, query
func (_m *BillingMeasuresDashboardRepository) GroupFiscalMeasureSummary(ctx context.Context, query billing_measures.GroupFiscalMeasureSummaryQuery) (billing_measures.FiscalMeasureSummary, error) {
	ret := _m.Called(ctx, query)

	var r0 billing_measures.FiscalMeasureSummary
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.GroupFiscalMeasureSummaryQuery) billing_measures.FiscalMeasureSummary); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(billing_measures.FiscalMeasureSummary)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.GroupFiscalMeasureSummaryQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBillingMeasureClosureResume provides a mock function with given fields: ctx, billingMeasureID
func (_m *BillingMeasuresDashboardRepository) SearchBillingMeasureClosureResume(ctx context.Context, billingMeasureID string) (billing_measures.BillingMeasureResumeClosureResponse, error) {
	ret := _m.Called(ctx, billingMeasureID)

	var r0 billing_measures.BillingMeasureResumeClosureResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) billing_measures.BillingMeasureResumeClosureResponse); ok {
		r0 = rf(ctx, billingMeasureID)
	} else {
		r0 = ret.Get(0).(billing_measures.BillingMeasureResumeClosureResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, billingMeasureID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchFiscalBillingMeasures provides a mock function with given fields: ctx, cups, distributorId, startDate, endDate
func (_m *BillingMeasuresDashboardRepository) SearchFiscalBillingMeasures(ctx context.Context, cups string, distributorId string, startDate time.Time, endDate time.Time) ([]billing_measures.BillingMeasure, error) {
	ret := _m.Called(ctx, cups, distributorId, startDate, endDate)

	var r0 []billing_measures.BillingMeasure
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Time) []billing_measures.BillingMeasure); ok {
		r0 = rf(ctx, cups, distributorId, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]billing_measures.BillingMeasure)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, cups, distributorId, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchLastBillingMeasures provides a mock function with given fields: ctx, cups, distributorId
func (_m *BillingMeasuresDashboardRepository) SearchLastBillingMeasures(ctx context.Context, cups string, distributorId string) (billing_measures.BillingMeasure, error) {
	ret := _m.Called(ctx, cups, distributorId)

	var r0 billing_measures.BillingMeasure
	if rf, ok := ret.Get(0).(func(context.Context, string, string) billing_measures.BillingMeasure); ok {
		r0 = rf(ctx, cups, distributorId)
	} else {
		r0 = ret.Get(0).(billing_measures.BillingMeasure)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, cups, distributorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBillingMeasuresDashboardRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBillingMeasuresDashboardRepository creates a new instance of BillingMeasuresDashboardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBillingMeasuresDashboardRepository(t mockConstructorTestingTNewBillingMeasuresDashboardRepository) *BillingMeasuresDashboardRepository {
	mock := &BillingMeasuresDashboardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
