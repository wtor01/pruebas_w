// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	inventory "bitbucket.org/sercide/data-ingestion/internal/inventory"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// RepositoryInventory is an autogenerated mock type for the RepositoryInventory type
type RepositoryInventory struct {
	mock.Mock
}

// GetDistributorByCdos provides a mock function with given fields: ctx, cdos
func (_m *RepositoryInventory) GetDistributorByCdos(ctx context.Context, cdos string) (inventory.Distributor, error) {
	ret := _m.Called(ctx, cdos)

	var r0 inventory.Distributor
	if rf, ok := ret.Get(0).(func(context.Context, string) inventory.Distributor); ok {
		r0 = rf(ctx, cdos)
	} else {
		r0 = ret.Get(0).(inventory.Distributor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cdos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributorByID provides a mock function with given fields: ctx, id
func (_m *RepositoryInventory) GetDistributorByID(ctx context.Context, id string) (inventory.Distributor, error) {
	ret := _m.Called(ctx, id)

	var r0 inventory.Distributor
	if rf, ok := ret.Get(0).(func(context.Context, string) inventory.Distributor); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(inventory.Distributor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributorBySmarkiaID provides a mock function with given fields: ctx, id
func (_m *RepositoryInventory) GetDistributorBySmarkiaID(ctx context.Context, id string) (inventory.Distributor, error) {
	ret := _m.Called(ctx, id)

	var r0 inventory.Distributor
	if rf, ok := ret.Get(0).(func(context.Context, string) inventory.Distributor); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(inventory.Distributor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeasureEquipmentByID provides a mock function with given fields: ctx, distributorID, id
func (_m *RepositoryInventory) GetMeasureEquipmentByID(ctx context.Context, distributorID string, id string) (inventory.MeasureEquipment, error) {
	ret := _m.Called(ctx, distributorID, id)

	var r0 inventory.MeasureEquipment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) inventory.MeasureEquipment); ok {
		r0 = rf(ctx, distributorID, id)
	} else {
		r0 = ret.Get(0).(inventory.MeasureEquipment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, distributorID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeasureEquipmentBySmarkiaID provides a mock function with given fields: ctx, id
func (_m *RepositoryInventory) GetMeasureEquipmentBySmarkiaID(ctx context.Context, id string) (inventory.MeasureEquipment, error) {
	ret := _m.Called(ctx, id)

	var r0 inventory.MeasureEquipment
	if rf, ok := ret.Get(0).(func(context.Context, string) inventory.MeasureEquipment); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(inventory.MeasureEquipment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeterConfig provides a mock function with given fields: ctx, search
func (_m *RepositoryInventory) GetMeterConfig(ctx context.Context, search inventory.GetMeterConfigByMeterQuery) (inventory.MeterConfig, error) {
	ret := _m.Called(ctx, search)

	var r0 inventory.MeterConfig
	if rf, ok := ret.Get(0).(func(context.Context, inventory.GetMeterConfigByMeterQuery) inventory.MeterConfig); ok {
		r0 = rf(ctx, search)
	} else {
		r0 = ret.Get(0).(inventory.MeterConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, inventory.GetMeterConfigByMeterQuery) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicePointByMeter provides a mock function with given fields: ctx, query
func (_m *RepositoryInventory) GetServicePointByMeter(ctx context.Context, query inventory.GetMeasureEquipmentByMeterQuery) (inventory.ServicePointScheduler, error) {
	ret := _m.Called(ctx, query)

	var r0 inventory.ServicePointScheduler
	if rf, ok := ret.Get(0).(func(context.Context, inventory.GetMeasureEquipmentByMeterQuery) inventory.ServicePointScheduler); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(inventory.ServicePointScheduler)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, inventory.GetMeasureEquipmentByMeterQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicePoints provides a mock function with given fields: ctx, dto
func (_m *RepositoryInventory) GetServicePoints(ctx context.Context, dto inventory.ServicePointSchedulerDto) ([]inventory.ServicePointScheduler, error) {
	ret := _m.Called(ctx, dto)

	var r0 []inventory.ServicePointScheduler
	if rf, ok := ret.Get(0).(func(context.Context, inventory.ServicePointSchedulerDto) []inventory.ServicePointScheduler); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.ServicePointScheduler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, inventory.ServicePointSchedulerDto) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupMetersByType provides a mock function with given fields: ctx, distributorID
func (_m *RepositoryInventory) GroupMetersByType(ctx context.Context, distributorID string) (map[string]int, error) {
	ret := _m.Called(ctx, distributorID)

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]int); ok {
		r0 = rf(ctx, distributorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, distributorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributors provides a mock function with given fields: ctx, search
func (_m *RepositoryInventory) ListDistributors(ctx context.Context, search inventory.Search) ([]inventory.Distributor, int, error) {
	ret := _m.Called(ctx, search)

	var r0 []inventory.Distributor
	if rf, ok := ret.Get(0).(func(context.Context, inventory.Search) []inventory.Distributor); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.Distributor)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, inventory.Search) int); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, inventory.Search) error); ok {
		r2 = rf(ctx, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListMeters provides a mock function with given fields: ctx, search
func (_m *RepositoryInventory) ListMeters(ctx context.Context, search inventory.Search) ([]inventory.MeasureEquipment, int, error) {
	ret := _m.Called(ctx, search)

	var r0 []inventory.MeasureEquipment
	if rf, ok := ret.Get(0).(func(context.Context, inventory.Search) []inventory.MeasureEquipment); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inventory.MeasureEquipment)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, inventory.Search) int); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, inventory.Search) error); ok {
		r2 = rf(ctx, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewRepositoryInventory creates a new instance of RepositoryInventory. It also registers a cleanup function to assert the mocks expectations.
func NewRepositoryInventory(t testing.TB) *RepositoryInventory {
	mock := &RepositoryInventory{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
