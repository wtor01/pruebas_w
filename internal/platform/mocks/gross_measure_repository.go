// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gross_measures "bitbucket.org/sercide/data-ingestion/internal/gross_measures"
	mock "github.com/stretchr/testify/mock"
)

// GrossMeasureRepository is an autogenerated mock type for the GrossMeasureRepository type
type GrossMeasureRepository struct {
	mock.Mock
}

// CountGrossMeasuresFromGenerationDate provides a mock function with given fields: ctx, query
func (_m *GrossMeasureRepository) CountGrossMeasuresFromGenerationDate(ctx context.Context, query gross_measures.QueryListForProcessCurveGenerationDate) (int, error) {
	ret := _m.Called(ctx, query)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, gross_measures.QueryListForProcessCurveGenerationDate) int); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gross_measures.QueryListForProcessCurveGenerationDate) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCloseMeasures provides a mock function with given fields: ctx, query
func (_m *GrossMeasureRepository) ListCloseMeasures(ctx context.Context, query gross_measures.QueryListMeasure) ([]gross_measures.MeasureCloseWrite, error) {
	ret := _m.Called(ctx, query)

	var r0 []gross_measures.MeasureCloseWrite
	if rf, ok := ret.Get(0).(func(context.Context, gross_measures.QueryListMeasure) []gross_measures.MeasureCloseWrite); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gross_measures.MeasureCloseWrite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gross_measures.QueryListMeasure) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCurveMeasures provides a mock function with given fields: ctx, query
func (_m *GrossMeasureRepository) ListCurveMeasures(ctx context.Context, query gross_measures.QueryListMeasure) ([]gross_measures.MeasureCurveWrite, error) {
	ret := _m.Called(ctx, query)

	var r0 []gross_measures.MeasureCurveWrite
	if rf, ok := ret.Get(0).(func(context.Context, gross_measures.QueryListMeasure) []gross_measures.MeasureCurveWrite); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gross_measures.MeasureCurveWrite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gross_measures.QueryListMeasure) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDailyCloseMeasures provides a mock function with given fields: ctx, query
func (_m *GrossMeasureRepository) ListDailyCloseMeasures(ctx context.Context, query gross_measures.QueryListForProcessClose) ([]gross_measures.MeasureCloseWrite, error) {
	ret := _m.Called(ctx, query)

	var r0 []gross_measures.MeasureCloseWrite
	if rf, ok := ret.Get(0).(func(context.Context, gross_measures.QueryListForProcessClose) []gross_measures.MeasureCloseWrite); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gross_measures.MeasureCloseWrite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gross_measures.QueryListForProcessClose) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDailyCurveMeasures provides a mock function with given fields: ctx, query
func (_m *GrossMeasureRepository) ListDailyCurveMeasures(ctx context.Context, query gross_measures.QueryListForProcessCurve) ([]gross_measures.MeasureCurveWrite, error) {
	ret := _m.Called(ctx, query)

	var r0 []gross_measures.MeasureCurveWrite
	if rf, ok := ret.Get(0).(func(context.Context, gross_measures.QueryListForProcessCurve) []gross_measures.MeasureCurveWrite); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gross_measures.MeasureCurveWrite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gross_measures.QueryListForProcessCurve) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGrossMeasuresFromGenerationDate provides a mock function with given fields: ctx, query
func (_m *GrossMeasureRepository) ListGrossMeasuresFromGenerationDate(ctx context.Context, query gross_measures.QueryListForProcessCurveGenerationDate) ([]gross_measures.MeasureCurveMeterSerialNumber, error) {
	ret := _m.Called(ctx, query)

	var r0 []gross_measures.MeasureCurveMeterSerialNumber
	if rf, ok := ret.Get(0).(func(context.Context, gross_measures.QueryListForProcessCurveGenerationDate) []gross_measures.MeasureCurveMeterSerialNumber); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gross_measures.MeasureCurveMeterSerialNumber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, gross_measures.QueryListForProcessCurveGenerationDate) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAllMeasuresClose provides a mock function with given fields: ctx, measures
func (_m *GrossMeasureRepository) SaveAllMeasuresClose(ctx context.Context, measures []gross_measures.MeasureCloseWrite) error {
	ret := _m.Called(ctx, measures)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []gross_measures.MeasureCloseWrite) error); ok {
		r0 = rf(ctx, measures)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAllMeasuresCurve provides a mock function with given fields: ctx, measures
func (_m *GrossMeasureRepository) SaveAllMeasuresCurve(ctx context.Context, measures []gross_measures.MeasureCurveWrite) error {
	ret := _m.Called(ctx, measures)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []gross_measures.MeasureCurveWrite) error); ok {
		r0 = rf(ctx, measures)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGrossMeasureRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGrossMeasureRepository creates a new instance of GrossMeasureRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGrossMeasureRepository(t mockConstructorTestingTNewGrossMeasureRepository) *GrossMeasureRepository {
	mock := &GrossMeasureRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
