// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	billing_measures "bitbucket.org/sercide/data-ingestion/internal/billing_measures"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ConsumCoefficientRepository is an autogenerated mock type for the ConsumCoefficientRepository type
type ConsumCoefficientRepository struct {
	mock.Mock
}

// Search provides a mock function with given fields: ctx, q
func (_m *ConsumCoefficientRepository) Search(ctx context.Context, q billing_measures.QueryConsumCoefficient) (float64, error) {
	ret := _m.Called(ctx, q)

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.QueryConsumCoefficient) float64); ok {
		r0 = rf(ctx, q)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.QueryConsumCoefficient) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConsumCoefficientRepository creates a new instance of ConsumCoefficientRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewConsumCoefficientRepository(t testing.TB) *ConsumCoefficientRepository {
	mock := &ConsumCoefficientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
