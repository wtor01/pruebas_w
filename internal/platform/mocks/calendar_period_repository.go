// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	measures "bitbucket.org/sercide/data-ingestion/internal/measures"
	mock "github.com/stretchr/testify/mock"
)

// CalendarPeriodRepository is an autogenerated mock type for the CalendarPeriodRepository type
type CalendarPeriodRepository struct {
	mock.Mock
}

// DeleteCalendars provides a mock function with given fields: ctx
func (_m *CalendarPeriodRepository) DeleteCalendars(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFestiveDays provides a mock function with given fields: ctx
func (_m *CalendarPeriodRepository) DeleteFestiveDays(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCalendarPeriod provides a mock function with given fields: ctx, search
func (_m *CalendarPeriodRepository) GetCalendarPeriod(ctx context.Context, search measures.SearchCalendarPeriod) (measures.CalendarPeriod, error) {
	ret := _m.Called(ctx, search)

	var r0 measures.CalendarPeriod
	if rf, ok := ret.Get(0).(func(context.Context, measures.SearchCalendarPeriod) measures.CalendarPeriod); ok {
		r0 = rf(ctx, search)
	} else {
		r0 = ret.Get(0).(measures.CalendarPeriod)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.SearchCalendarPeriod) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFestiveDay provides a mock function with given fields: ctx, search
func (_m *CalendarPeriodRepository) GetFestiveDay(ctx context.Context, search measures.SearchFestiveDay) (measures.FestiveDay, error) {
	ret := _m.Called(ctx, search)

	var r0 measures.FestiveDay
	if rf, ok := ret.Get(0).(func(context.Context, measures.SearchFestiveDay) measures.FestiveDay); ok {
		r0 = rf(ctx, search)
	} else {
		r0 = ret.Get(0).(measures.FestiveDay)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, measures.SearchFestiveDay) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCalendarPeriod provides a mock function with given fields: ctx, calendarPeriods
func (_m *CalendarPeriodRepository) SaveCalendarPeriod(ctx context.Context, calendarPeriods []measures.CalendarPeriod) error {
	ret := _m.Called(ctx, calendarPeriods)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []measures.CalendarPeriod) error); ok {
		r0 = rf(ctx, calendarPeriods)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveFestiveDay provides a mock function with given fields: ctx, day
func (_m *CalendarPeriodRepository) SaveFestiveDay(ctx context.Context, day measures.FestiveDay) error {
	ret := _m.Called(ctx, day)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, measures.FestiveDay) error); ok {
		r0 = rf(ctx, day)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCalendarPeriodRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCalendarPeriodRepository creates a new instance of CalendarPeriodRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCalendarPeriodRepository(t mockConstructorTestingTNewCalendarPeriodRepository) *CalendarPeriodRepository {
	mock := &CalendarPeriodRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
