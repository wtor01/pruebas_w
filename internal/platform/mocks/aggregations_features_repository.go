// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	aggregations "bitbucket.org/sercide/data-ingestion/internal/aggregations"

	db "bitbucket.org/sercide/data-ingestion/pkg/db"

	mock "github.com/stretchr/testify/mock"
)

// AggregationsFeaturesRepository is an autogenerated mock type for the AggregationsFeaturesRepository type
type AggregationsFeaturesRepository struct {
	mock.Mock
}

// DeleteFeatures provides a mock function with given fields: ctx, id
func (_m *AggregationsFeaturesRepository) DeleteFeatures(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFeatures provides a mock function with given fields: ctx, id
func (_m *AggregationsFeaturesRepository) GetFeatures(ctx context.Context, id string) (aggregations.Features, error) {
	ret := _m.Called(ctx, id)

	var r0 aggregations.Features
	if rf, ok := ret.Get(0).(func(context.Context, string) aggregations.Features); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(aggregations.Features)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeaturesByIds provides a mock function with given fields: ctx, ids
func (_m *AggregationsFeaturesRepository) GetFeaturesByIds(ctx context.Context, ids []string) ([]aggregations.Features, error) {
	ret := _m.Called(ctx, ids)

	var r0 []aggregations.Features
	if rf, ok := ret.Get(0).(func(context.Context, []string) []aggregations.Features); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aggregations.Features)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFeatures provides a mock function with given fields: ctx, query
func (_m *AggregationsFeaturesRepository) ListFeatures(ctx context.Context, query db.Pagination) ([]aggregations.Features, int, error) {
	ret := _m.Called(ctx, query)

	var r0 []aggregations.Features
	if rf, ok := ret.Get(0).(func(context.Context, db.Pagination) []aggregations.Features); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aggregations.Features)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, db.Pagination) int); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, db.Pagination) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveFeatures provides a mock function with given fields: ctx, obj
func (_m *AggregationsFeaturesRepository) SaveFeatures(ctx context.Context, obj aggregations.Features) error {
	ret := _m.Called(ctx, obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.Features) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchFeatures provides a mock function with given fields: ctx, features
func (_m *AggregationsFeaturesRepository) SearchFeatures(ctx context.Context, features aggregations.SearchFeatures) ([]aggregations.Features, error) {
	ret := _m.Called(ctx, features)

	var r0 []aggregations.Features
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.SearchFeatures) []aggregations.Features); ok {
		r0 = rf(ctx, features)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aggregations.Features)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, aggregations.SearchFeatures) error); ok {
		r1 = rf(ctx, features)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAggregationsFeaturesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAggregationsFeaturesRepository creates a new instance of AggregationsFeaturesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAggregationsFeaturesRepository(t mockConstructorTestingTNewAggregationsFeaturesRepository) *AggregationsFeaturesRepository {
	mock := &AggregationsFeaturesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
