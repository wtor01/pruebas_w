// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ReprocessingDateRepository is an autogenerated mock type for the ReprocessingDateRepository type
type ReprocessingDateRepository struct {
	mock.Mock
}

// GetDate provides a mock function with given fields: ctx, keySearch
func (_m *ReprocessingDateRepository) GetDate(ctx context.Context, keySearch string) (error, time.Time) {
	ret := _m.Called(ctx, keySearch)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, keySearch)
	} else {
		r0 = ret.Error(0)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = rf(ctx, keySearch)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	return r0, r1
}

// SetDate provides a mock function with given fields: ctx, keySearch, date
func (_m *ReprocessingDateRepository) SetDate(ctx context.Context, keySearch string, date time.Time) error {
	ret := _m.Called(ctx, keySearch, date)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, keySearch, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewReprocessingDateRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReprocessingDateRepository creates a new instance of ReprocessingDateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReprocessingDateRepository(t mockConstructorTestingTNewReprocessingDateRepository) *ReprocessingDateRepository {
	mock := &ReprocessingDateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
