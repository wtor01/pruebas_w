// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	"bitbucket.org/sercide/data-ingestion/internal/validations"
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// AdminRepository is an autogenerated mock type for the AdminRepository type
type AdminRepository struct {
	mock.Mock
}

// DeleteDistributorValidationMeasureConfig provides a mock function with given fields: ctx, distributorId, configId
func (_m *AdminRepository) DeleteDistributorValidationMeasureConfig(ctx context.Context, distributorId string, configId string) error {
	ret := _m.Called(ctx, distributorId, configId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, distributorId, configId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteValidationMeasureByID provides a mock function with given fields: ctx, id
func (_m *AdminRepository) DeleteValidationMeasureByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDistributorValidationMeasureConfig provides a mock function with given fields: ctx, distributorId, configId
func (_m *AdminRepository) GetDistributorValidationMeasureConfig(ctx context.Context, distributorId string, configId string) (validations.ValidationMeasureConfig, error) {
	ret := _m.Called(ctx, distributorId, configId)

	var r0 validations.ValidationMeasureConfig
	if rf, ok := ret.Get(0).(func(context.Context, string, string) validations.ValidationMeasureConfig); ok {
		r0 = rf(ctx, distributorId, configId)
	} else {
		r0 = ret.Get(0).(validations.ValidationMeasureConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, distributorId, configId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributorValidationMeasureConfigForThisValidation provides a mock function with given fields: ctx, distributorId, validationId
func (_m *AdminRepository) GetDistributorValidationMeasureConfigForThisValidation(ctx context.Context, distributorId string, validationId string) (validations.ValidationMeasureConfig, error) {
	ret := _m.Called(ctx, distributorId, validationId)

	var r0 validations.ValidationMeasureConfig
	if rf, ok := ret.Get(0).(func(context.Context, string, string) validations.ValidationMeasureConfig); ok {
		r0 = rf(ctx, distributorId, validationId)
	} else {
		r0 = ret.Get(0).(validations.ValidationMeasureConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, distributorId, validationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidationMeasureByID provides a mock function with given fields: ctx, id
func (_m *AdminRepository) GetValidationMeasureByID(ctx context.Context, id string) (validations.ValidationMeasure, error) {
	ret := _m.Called(ctx, id)

	var r0 validations.ValidationMeasure
	if rf, ok := ret.Get(0).(func(context.Context, string) validations.ValidationMeasure); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(validations.ValidationMeasure)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributorValidationMeasureConfig provides a mock function with given fields: ctx, search
func (_m *AdminRepository) ListDistributorValidationMeasureConfig(ctx context.Context, search validations.SearchValidationMeasureConfig) ([]validations.ValidationMeasureConfig, error) {
	ret := _m.Called(ctx, search)

	var r0 []validations.ValidationMeasureConfig
	if rf, ok := ret.Get(0).(func(context.Context, validations.SearchValidationMeasureConfig) []validations.ValidationMeasureConfig); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]validations.ValidationMeasureConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, validations.SearchValidationMeasureConfig) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListValidationMeasure provides a mock function with given fields: ctx, search
func (_m *AdminRepository) ListValidationMeasure(ctx context.Context, search validations.SearchValidationMeasure) ([]validations.ValidationMeasure, int, error) {
	ret := _m.Called(ctx, search)

	var r0 []validations.ValidationMeasure
	if rf, ok := ret.Get(0).(func(context.Context, validations.SearchValidationMeasure) []validations.ValidationMeasure); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]validations.ValidationMeasure)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, validations.SearchValidationMeasure) int); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, validations.SearchValidationMeasure) error); ok {
		r2 = rf(ctx, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveValidationMeasure provides a mock function with given fields: ctx, v
func (_m *AdminRepository) SaveValidationMeasure(ctx context.Context, v validations.ValidationMeasure) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, validations.ValidationMeasure) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveValidationMeasureConfig provides a mock function with given fields: ctx, v
func (_m *AdminRepository) SaveValidationMeasureConfig(ctx context.Context, v validations.ValidationMeasureConfig) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, validations.ValidationMeasureConfig) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAdminRepository creates a new instance of AdminRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdminRepository(t testing.TB) *AdminRepository {
	mock := &AdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
