// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	aggregations "bitbucket.org/sercide/data-ingestion/internal/aggregations"

	mock "github.com/stretchr/testify/mock"
)

// AggregationConfigRepository is an autogenerated mock type for the AggregationConfigRepository type
type AggregationConfigRepository struct {
	mock.Mock
}

// DeleteAggregationConfig provides a mock function with given fields: ctx, aggregationConfigId
func (_m *AggregationConfigRepository) DeleteAggregationConfig(ctx context.Context, aggregationConfigId string) error {
	ret := _m.Called(ctx, aggregationConfigId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, aggregationConfigId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAggregationConfigById provides a mock function with given fields: ctx, aggregationConfigId
func (_m *AggregationConfigRepository) GetAggregationConfigById(ctx context.Context, aggregationConfigId string) (aggregations.Config, error) {
	ret := _m.Called(ctx, aggregationConfigId)

	var r0 aggregations.Config
	if rf, ok := ret.Get(0).(func(context.Context, string) aggregations.Config); ok {
		r0 = rf(ctx, aggregationConfigId)
	} else {
		r0 = ret.Get(0).(aggregations.Config)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, aggregationConfigId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregationConfigs provides a mock function with given fields: ctx, dto
func (_m *AggregationConfigRepository) GetAggregationConfigs(ctx context.Context, dto aggregations.GetConfigsQuery) ([]aggregations.Config, int, error) {
	ret := _m.Called(ctx, dto)

	var r0 []aggregations.Config
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.GetConfigsQuery) []aggregations.Config); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aggregations.Config)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, aggregations.GetConfigsQuery) int); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, aggregations.GetConfigsQuery) error); ok {
		r2 = rf(ctx, dto)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveAggregationConfig provides a mock function with given fields: ctx, aggregationConfig
func (_m *AggregationConfigRepository) SaveAggregationConfig(ctx context.Context, aggregationConfig aggregations.Config) (aggregations.Config, error) {
	ret := _m.Called(ctx, aggregationConfig)

	var r0 aggregations.Config
	if rf, ok := ret.Get(0).(func(context.Context, aggregations.Config) aggregations.Config); ok {
		r0 = rf(ctx, aggregationConfig)
	} else {
		r0 = ret.Get(0).(aggregations.Config)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, aggregations.Config) error); ok {
		r1 = rf(ctx, aggregationConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAggregationConfigRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAggregationConfigRepository creates a new instance of AggregationConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAggregationConfigRepository(t mockConstructorTestingTNewAggregationConfigRepository) *AggregationConfigRepository {
	mock := &AggregationConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
