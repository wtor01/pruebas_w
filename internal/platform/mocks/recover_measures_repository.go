// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"

	process_measures "bitbucket.org/sercide/data-ingestion/internal/process_measures"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// RecoverMeasuresRepository is an autogenerated mock type for the RecoverMeasuresRepository type
type RecoverMeasuresRepository struct {
	mock.Mock
}

// AllRecoverMeasures provides a mock function with given fields: ctx, s
func (_m *RecoverMeasuresRepository) AllRecoverMeasures(ctx context.Context, s process_measures.PaginationRecoverMeasures) ([]process_measures.RecoverMeasures, int, error) {
	ret := _m.Called(ctx, s)

	var r0 []process_measures.RecoverMeasures
	if rf, ok := ret.Get(0).(func(context.Context, process_measures.PaginationRecoverMeasures) []process_measures.RecoverMeasures); ok {
		r0 = rf(ctx, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]process_measures.RecoverMeasures)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, process_measures.PaginationRecoverMeasures) int); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, process_measures.PaginationRecoverMeasures) error); ok {
		r2 = rf(ctx, s)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteRecoverMeasures provides a mock function with given fields: ctx, id
func (_m *RecoverMeasuresRepository) DeleteRecoverMeasures(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecoverMeasures provides a mock function with given fields: ctx, id
func (_m *RecoverMeasuresRepository) GetRecoverMeasures(ctx context.Context, id string) (process_measures.RecoverMeasures, error) {
	ret := _m.Called(ctx, id)

	var r0 process_measures.RecoverMeasures
	if rf, ok := ret.Get(0).(func(context.Context, string) process_measures.RecoverMeasures); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(process_measures.RecoverMeasures)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRecoverMeasures provides a mock function with given fields: ctx, rm
func (_m *RecoverMeasuresRepository) SaveRecoverMeasures(ctx context.Context, rm process_measures.RecoverMeasures) error {
	ret := _m.Called(ctx, rm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, process_measures.RecoverMeasures) error); ok {
		r0 = rf(ctx, rm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchRecoverMeasures provides a mock function with given fields: ctx, s
func (_m *RecoverMeasuresRepository) SearchRecoverMeasures(ctx context.Context, s process_measures.RecoverMeasures) (process_measures.RecoverMeasures, int, error) {
	ret := _m.Called(ctx, s)

	var r0 process_measures.RecoverMeasures
	if rf, ok := ret.Get(0).(func(context.Context, process_measures.RecoverMeasures) process_measures.RecoverMeasures); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(process_measures.RecoverMeasures)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, process_measures.RecoverMeasures) int); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, process_measures.RecoverMeasures) error); ok {
		r2 = rf(ctx, s)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewRecoverMeasuresRepository creates a new instance of RecoverMeasuresRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecoverMeasuresRepository(t testing.TB) *RecoverMeasuresRepository {
	mock := &RecoverMeasuresRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
