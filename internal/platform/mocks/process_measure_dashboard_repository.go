// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	measures "bitbucket.org/sercide/data-ingestion/internal/measures"
	mock "github.com/stretchr/testify/mock"

	process_measures "bitbucket.org/sercide/data-ingestion/internal/process_measures"
)

// ProcessMeasureDashboardRepository is an autogenerated mock type for the ProcessMeasureDashboardRepository type
type ProcessMeasureDashboardRepository struct {
	mock.Mock
}

// GetCupsMeasures provides a mock function with given fields: ctx, query
func (_m *ProcessMeasureDashboardRepository) GetCupsMeasures(ctx context.Context, query process_measures.ListCupsQuery) (map[string]*measures.DashboardCupsReading, error) {
	ret := _m.Called(ctx, query)

	var r0 map[string]*measures.DashboardCupsReading
	if rf, ok := ret.Get(0).(func(context.Context, process_measures.ListCupsQuery) map[string]*measures.DashboardCupsReading); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*measures.DashboardCupsReading)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, process_measures.ListCupsQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboard provides a mock function with given fields: ctx, query
func (_m *ProcessMeasureDashboardRepository) GetDashboard(ctx context.Context, query process_measures.GetDashboardQuery) ([]measures.DashboardMeasureI, error) {
	ret := _m.Called(ctx, query)

	var r0 []measures.DashboardMeasureI
	if rf, ok := ret.Get(0).(func(context.Context, process_measures.GetDashboardQuery) []measures.DashboardMeasureI); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]measures.DashboardMeasureI)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, process_measures.GetDashboardQuery) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProcessMeasureDashboardRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProcessMeasureDashboardRepository creates a new instance of ProcessMeasureDashboardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessMeasureDashboardRepository(t mockConstructorTestingTNewProcessMeasureDashboardRepository) *ProcessMeasureDashboardRepository {
	mock := &ProcessMeasureDashboardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
