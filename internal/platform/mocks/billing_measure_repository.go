// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	billing_measures "bitbucket.org/sercide/data-ingestion/internal/billing_measures"

	mock "github.com/stretchr/testify/mock"
)

// BillingMeasureRepository is an autogenerated mock type for the BillingMeasureRepository type
type BillingMeasureRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, id
func (_m *BillingMeasureRepository) Find(ctx context.Context, id string) (billing_measures.BillingMeasure, error) {
	ret := _m.Called(ctx, id)

	var r0 billing_measures.BillingMeasure
	if rf, ok := ret.Get(0).(func(context.Context, string) billing_measures.BillingMeasure); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(billing_measures.BillingMeasure)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloseHistories provides a mock function with given fields: ctx, q
func (_m *BillingMeasureRepository) GetCloseHistories(ctx context.Context, q billing_measures.QueryGetCloseHistories) ([]billing_measures.BillingMeasure, error) {
	ret := _m.Called(ctx, q)

	var r0 []billing_measures.BillingMeasure
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.QueryGetCloseHistories) []billing_measures.BillingMeasure); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]billing_measures.BillingMeasure)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.QueryGetCloseHistories) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrevious provides a mock function with given fields: ctx, query
func (_m *BillingMeasureRepository) GetPrevious(ctx context.Context, query billing_measures.GetPrevious) (billing_measures.BillingMeasure, error) {
	ret := _m.Called(ctx, query)

	var r0 billing_measures.BillingMeasure
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.GetPrevious) billing_measures.BillingMeasure); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(billing_measures.BillingMeasure)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.GetPrevious) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Last provides a mock function with given fields: ctx, q
func (_m *BillingMeasureRepository) Last(ctx context.Context, q billing_measures.QueryLast) (billing_measures.BillingMeasure, error) {
	ret := _m.Called(ctx, q)

	var r0 billing_measures.BillingMeasure
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.QueryLast) billing_measures.BillingMeasure); ok {
		r0 = rf(ctx, q)
	} else {
		r0 = ret.Get(0).(billing_measures.BillingMeasure)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.QueryLast) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LastHistory provides a mock function with given fields: ctx, q
func (_m *BillingMeasureRepository) LastHistory(ctx context.Context, q billing_measures.QueryLastHistory) (billing_measures.BillingMeasure, error) {
	ret := _m.Called(ctx, q)

	var r0 billing_measures.BillingMeasure
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.QueryLastHistory) billing_measures.BillingMeasure); ok {
		r0 = rf(ctx, q)
	} else {
		r0 = ret.Get(0).(billing_measures.BillingMeasure)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, billing_measures.QueryLastHistory) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, measure
func (_m *BillingMeasureRepository) Save(ctx context.Context, measure billing_measures.BillingMeasure) error {
	ret := _m.Called(ctx, measure)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, billing_measures.BillingMeasure) error); ok {
		r0 = rf(ctx, measure)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAll provides a mock function with given fields: ctx, measures
func (_m *BillingMeasureRepository) SaveAll(ctx context.Context, measures []billing_measures.BillingMeasure) error {
	ret := _m.Called(ctx, measures)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []billing_measures.BillingMeasure) error); ok {
		r0 = rf(ctx, measures)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBillingMeasureRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBillingMeasureRepository creates a new instance of BillingMeasureRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBillingMeasureRepository(t mockConstructorTestingTNewBillingMeasureRepository) *BillingMeasureRepository {
	mock := &BillingMeasureRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
