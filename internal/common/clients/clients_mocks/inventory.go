// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	clients "bitbucket.org/sercide/data-ingestion/internal/common/clients"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Inventory is an autogenerated mock type for the Inventory type
type Inventory struct {
	mock.Mock
}

// GetAllDistributors provides a mock function with given fields: ctx
func (_m *Inventory) GetAllDistributors(ctx context.Context) ([]clients.Distributor, error) {
	ret := _m.Called(ctx)

	var r0 []clients.Distributor
	if rf, ok := ret.Get(0).(func(context.Context) []clients.Distributor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clients.Distributor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributorByCdos provides a mock function with given fields: ctx, cdos
func (_m *Inventory) GetDistributorByCdos(ctx context.Context, cdos string) (clients.Distributor, error) {
	ret := _m.Called(ctx, cdos)

	var r0 clients.Distributor
	if rf, ok := ret.Get(0).(func(context.Context, string) clients.Distributor); ok {
		r0 = rf(ctx, cdos)
	} else {
		r0 = ret.Get(0).(clients.Distributor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cdos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributorById provides a mock function with given fields: ctx, id
func (_m *Inventory) GetDistributorById(ctx context.Context, id string) (clients.Distributor, error) {
	ret := _m.Called(ctx, id)

	var r0 clients.Distributor
	if rf, ok := ret.Get(0).(func(context.Context, string) clients.Distributor); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(clients.Distributor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributorBySmarkiaId provides a mock function with given fields: ctx, smarikiaId
func (_m *Inventory) GetDistributorBySmarkiaId(ctx context.Context, smarikiaId string) (clients.Distributor, error) {
	ret := _m.Called(ctx, smarikiaId)

	var r0 clients.Distributor
	if rf, ok := ret.Get(0).(func(context.Context, string) clients.Distributor); ok {
		r0 = rf(ctx, smarikiaId)
	} else {
		r0 = ret.Get(0).(clients.Distributor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, smarikiaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeasureEquipmentBySmarkiaId provides a mock function with given fields: ctx, smarikiaId
func (_m *Inventory) GetMeasureEquipmentBySmarkiaId(ctx context.Context, smarikiaId string) (clients.Equipment, error) {
	ret := _m.Called(ctx, smarikiaId)

	var r0 clients.Equipment
	if rf, ok := ret.Get(0).(func(context.Context, string) clients.Equipment); ok {
		r0 = rf(ctx, smarikiaId)
	} else {
		r0 = ret.Get(0).(clients.Equipment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, smarikiaId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeterConfigByMeterService provides a mock function with given fields: ctx, query
func (_m *Inventory) GetMeterConfigByMeterService(ctx context.Context, query clients.GetMeterConfigByMeterDto) (clients.MeterConfig, error) {
	ret := _m.Called(ctx, query)

	var r0 clients.MeterConfig
	if rf, ok := ret.Get(0).(func(context.Context, clients.GetMeterConfigByMeterDto) clients.MeterConfig); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(clients.MeterConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, clients.GetMeterConfigByMeterDto) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicePointConfigByMeter provides a mock function with given fields: ctx, query
func (_m *Inventory) GetServicePointConfigByMeter(ctx context.Context, query clients.GetServicePointConfigByMeterIdDto) (clients.ServicePointScheduler, error) {
	ret := _m.Called(ctx, query)

	var r0 clients.ServicePointScheduler
	if rf, ok := ret.Get(0).(func(context.Context, clients.GetServicePointConfigByMeterIdDto) clients.ServicePointScheduler); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Get(0).(clients.ServicePointScheduler)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, clients.GetServicePointConfigByMeterIdDto) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicePoints provides a mock function with given fields: ctx, inventoryClient
func (_m *Inventory) GetServicePoints(ctx context.Context, inventoryClient clients.ServicePointSchedulerDto) ([]clients.ServicePointScheduler, error) {
	ret := _m.Called(ctx, inventoryClient)

	var r0 []clients.ServicePointScheduler
	if rf, ok := ret.Get(0).(func(context.Context, clients.ServicePointSchedulerDto) []clients.ServicePointScheduler); ok {
		r0 = rf(ctx, inventoryClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clients.ServicePointScheduler)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, clients.ServicePointSchedulerDto) error); ok {
		r1 = rf(ctx, inventoryClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupMetersByType provides a mock function with given fields: ctx, distributorID
func (_m *Inventory) GroupMetersByType(ctx context.Context, distributorID string) (map[string]int, error) {
	ret := _m.Called(ctx, distributorID)

	var r0 map[string]int
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]int); ok {
		r0 = rf(ctx, distributorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, distributorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDistributors provides a mock function with given fields: ctx, dto
func (_m *Inventory) ListDistributors(ctx context.Context, dto clients.ListDistributorsDto) ([]clients.Distributor, int, error) {
	ret := _m.Called(ctx, dto)

	var r0 []clients.Distributor
	if rf, ok := ret.Get(0).(func(context.Context, clients.ListDistributorsDto) []clients.Distributor); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clients.Distributor)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, clients.ListDistributorsDto) int); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, clients.ListDistributorsDto) error); ok {
		r2 = rf(ctx, dto)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListMeasureEquipmentByDistributorId provides a mock function with given fields: ctx, distributorID
func (_m *Inventory) ListMeasureEquipmentByDistributorId(ctx context.Context, distributorID string) ([]clients.Equipment, error) {
	ret := _m.Called(ctx, distributorID)

	var r0 []clients.Equipment
	if rf, ok := ret.Get(0).(func(context.Context, string) []clients.Equipment); ok {
		r0 = rf(ctx, distributorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clients.Equipment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, distributorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInventory creates a new instance of Inventory. It also registers a cleanup function to assert the mocks expectations.
func NewInventory(t testing.TB) *Inventory {
	mock := &Inventory{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
