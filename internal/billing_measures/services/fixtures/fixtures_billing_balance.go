package fixtures

import (
	"bitbucket.org/sercide/data-ingestion/internal/billing_measures"
	"bitbucket.org/sercide/data-ingestion/internal/measures"
)

var Billing_Balance_Complete = billing_measures.BillingBalance{
	Origin: measures.STM,
	P0: &billing_measures.BillingBalancePeriod{
		AI:                   9000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   9000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   9000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
	P1: &billing_measures.BillingBalancePeriod{
		AI:                   3000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   3000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   3000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
	P2: &billing_measures.BillingBalancePeriod{
		AI:                   4000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   4000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   4000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
	P3: &billing_measures.BillingBalancePeriod{
		AI:                   2000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   2000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   2000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
}

var Billing_Balance_One_Filled = billing_measures.BillingBalance{
	Origin: measures.STM,
	P0: &billing_measures.BillingBalancePeriod{
		AI:                   9000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   9000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   9000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
	P1: &billing_measures.BillingBalancePeriod{
		AI:                   3000,
		BalanceTypeAI:        billing_measures.CalculatedByCloseBalance,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Invalid,
		EstimatedCodeAI:      2,
		AE:                   3000,
		BalanceTypeAE:        billing_measures.CalculatedByCloseBalance,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Invalid,
		EstimatedCodeAE:      2,
		R1:                   3000,
		BalanceTypeR1:        billing_measures.CalculatedByCloseBalance,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Invalid,
		EstimatedCodeR1:      2,
	},
	P2: &billing_measures.BillingBalancePeriod{
		AI:                   4000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   4000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   4000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
	P3: &billing_measures.BillingBalancePeriod{
		AI:                   2000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   2000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   2000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
}

var Billing_Balance_Two_Filled = billing_measures.BillingBalance{
	Origin: measures.STM,
	P0: &billing_measures.BillingBalancePeriod{
		AI:                   9000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   9000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   9000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
	P1: &billing_measures.BillingBalancePeriod{
		AI:                   3000,
		BalanceTypeAI:        billing_measures.CalculatedByCloseSum,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Invalid,
		EstimatedCodeAI:      2,
		AE:                   3000,
		BalanceTypeAE:        billing_measures.CalculatedByCloseSum,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Invalid,
		EstimatedCodeAE:      2,
		R1:                   3000,
		BalanceTypeR1:        billing_measures.CalculatedByCloseSum,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Invalid,
		EstimatedCodeR1:      2,
	},
	P2: &billing_measures.BillingBalancePeriod{
		AI:                   3000,
		BalanceTypeAI:        billing_measures.CalculatedByCloseSum,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Invalid,
		EstimatedCodeAI:      2,
		AE:                   3000,
		BalanceTypeAE:        billing_measures.CalculatedByCloseSum,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Invalid,
		EstimatedCodeAE:      2,
		R1:                   3000,
		BalanceTypeR1:        billing_measures.CalculatedByCloseSum,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Invalid,
		EstimatedCodeR1:      2,
	},
	P3: &billing_measures.BillingBalancePeriod{
		AI:                   2000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   2000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   2000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
}

var Billing_Balance_Invalid_Balance = billing_measures.BillingBalance{
	Origin: measures.STM,
	P0: &billing_measures.BillingBalancePeriod{
		AI:                   9000,
		BalanceTypeAI:        billing_measures.CalculatedByCloseSum,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Invalid,
		EstimatedCodeAI:      2,
		AE:                   9000,
		BalanceTypeAE:        billing_measures.CalculatedByCloseSum,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Invalid,
		EstimatedCodeAE:      2,
		R1:                   9000,
		BalanceTypeR1:        billing_measures.CalculatedByCloseSum,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Invalid,
		EstimatedCodeR1:      2,
	},
	P1: &billing_measures.BillingBalancePeriod{
		AI:                   3000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   3000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   3000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
	P2: &billing_measures.BillingBalancePeriod{
		AI:                   4000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   4000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   4000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
	P3: &billing_measures.BillingBalancePeriod{
		AI:                   2000,
		BalanceTypeAI:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAI: billing_measures.FirmBalanceMeasure,
		BalanceOriginAI:      billing_measures.TlmOrigin,
		BalanceValidationAI:  measures.Valid,
		EstimatedCodeAI:      1,
		AE:                   2000,
		BalanceTypeAE:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeAE: billing_measures.FirmBalanceMeasure,
		BalanceOriginAE:      billing_measures.TlmOrigin,
		BalanceValidationAE:  measures.Valid,
		EstimatedCodeAE:      1,
		R1:                   2000,
		BalanceTypeR1:        billing_measures.RealByRemoteRead,
		BalanceMeasureTypeR1: billing_measures.FirmBalanceMeasure,
		BalanceOriginR1:      billing_measures.TlmOrigin,
		BalanceValidationR1:  measures.Valid,
		EstimatedCodeR1:      1,
	},
}

var Billing_Balance_House_Close = billing_measures.BillingBalance{
	Origin: measures.STM,
	P0: &billing_measures.BillingBalancePeriod{
		AI:                   0,
		BalanceTypeAI:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeAI: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginAI:      billing_measures.EstimateOrigin,
		BalanceValidationAI:  measures.Invalid,
		EstimatedCodeAI:      5,
		AE:                   0,
		BalanceTypeAE:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeAE: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginAE:      billing_measures.EstimateOrigin,
		BalanceValidationAE:  measures.Invalid,
		EstimatedCodeAE:      5,
		R1:                   0,
		BalanceTypeR1:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeR1: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginR1:      billing_measures.EstimateOrigin,
		BalanceValidationR1:  measures.Invalid,
		EstimatedCodeR1:      5,
	},
	P1: &billing_measures.BillingBalancePeriod{
		AI:                   0,
		BalanceTypeAI:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeAI: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginAI:      billing_measures.EstimateOrigin,
		BalanceValidationAI:  measures.Invalid,
		EstimatedCodeAI:      5,
		AE:                   0,
		BalanceTypeAE:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeAE: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginAE:      billing_measures.EstimateOrigin,
		BalanceValidationAE:  measures.Invalid,
		EstimatedCodeAE:      5,
		R1:                   0,
		BalanceTypeR1:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeR1: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginR1:      billing_measures.EstimateOrigin,
		BalanceValidationR1:  measures.Invalid,
		EstimatedCodeR1:      5,
	},
	P2: &billing_measures.BillingBalancePeriod{
		AI:                   0,
		BalanceTypeAI:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeAI: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginAI:      billing_measures.EstimateOrigin,
		BalanceValidationAI:  measures.Invalid,
		EstimatedCodeAI:      5,
		AE:                   0,
		BalanceTypeAE:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeAE: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginAE:      billing_measures.EstimateOrigin,
		BalanceValidationAE:  measures.Invalid,
		EstimatedCodeAE:      5,
		R1:                   0,
		BalanceTypeR1:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeR1: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginR1:      billing_measures.EstimateOrigin,
		BalanceValidationR1:  measures.Invalid,
		EstimatedCodeR1:      5,
	},
	P3: &billing_measures.BillingBalancePeriod{
		AI:                   0,
		BalanceTypeAI:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeAI: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginAI:      billing_measures.EstimateOrigin,
		BalanceValidationAI:  measures.Invalid,
		EstimatedCodeAI:      5,
		AE:                   0,
		BalanceTypeAE:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeAE: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginAE:      billing_measures.EstimateOrigin,
		BalanceValidationAE:  measures.Invalid,
		EstimatedCodeAE:      5,
		R1:                   0,
		BalanceTypeR1:        billing_measures.EstimateOnlyHistoric,
		BalanceMeasureTypeR1: billing_measures.ProvisionalBalanceMeasure,
		BalanceOriginR1:      billing_measures.EstimateOrigin,
		BalanceValidationR1:  measures.Invalid,
		EstimatedCodeR1:      5,
	},
}
