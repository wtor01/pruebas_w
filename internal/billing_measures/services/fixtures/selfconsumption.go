package fixtures

import (
	"bitbucket.org/sercide/data-ingestion/internal/billing_measures"
	"time"
)

var SelfConsumptionRepositoryGetActiveSelfConsumptionByCUP = billing_measures.SelfConsumption{
	ID:            "ID",
	CAU:           "CAU",
	Name:          "Name",
	StatusID:      0,
	StatusName:    "",
	CcaaId:        0,
	Ccaa:          "",
	InitDate:      time.Time{},
	EndDate:       time.Time{},
	DistributorId: "",
	Configs: []billing_measures.ConfigSelfConsumption{
		{
			ID:                    "Id",
			CauID:                 "CauID",
			StatusID:              1,
			StatusName:            "StatusName",
			InitDate:              time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
			EndDate:               time.Date(2022, 02, 01, 00, 00, 0, 0, time.UTC),
			CnmcTypeId:            2,
			CnmcTypeName:          "CnmcTypeName",
			CnmcTypeDesc:          "CnmcTypeDesc",
			ConfType:              "ConfType",
			ConfTypeDescription:   "ConfTypeDescription",
			ConsumerType:          "ConsumerType",
			ParticipantNumber:     3,
			ConnType:              "ConnType",
			Excedents:             false,
			Compensation:          true,
			GenerationPot:         4,
			GroupSubgroup:         5,
			AntivertType:          "AntivertType",
			SolarZoneId:           6,
			SolarZoneNum:          7,
			SolarZoneName:         "SolarZoneName",
			TechnologyId:          "TechnologyId",
			TechnologyDescription: "TechnologyDescription",
		},
		{
			ID:       "Id 2",
			InitDate: time.Date(2022, 02, 01, 00, 00, 0, 0, time.UTC),
			EndDate:  time.Date(2022, 03, 01, 00, 00, 0, 0, time.UTC),
		},
	},
	Points: []billing_measures.PointSelfConsumption{
		{
			ID:               "Id 1",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_1",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
		},
		{
			ID:               "Id 2",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_2",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
		},
	},
}

var SelfConsumptionRepositoryGetActiveSelfConsumptionByCUPonePoint = billing_measures.SelfConsumption{
	ID:            "ID",
	CAU:           "CAU",
	Name:          "Name",
	StatusID:      0,
	StatusName:    "",
	CcaaId:        0,
	Ccaa:          "",
	InitDate:      time.Time{},
	EndDate:       time.Time{},
	DistributorId: "",
	Configs: []billing_measures.ConfigSelfConsumption{
		{
			ID:                    "Id",
			CauID:                 "CauID",
			StatusID:              1,
			StatusName:            "StatusName",
			InitDate:              time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
			EndDate:               time.Date(2022, 02, 01, 00, 00, 0, 0, time.UTC),
			CnmcTypeId:            2,
			CnmcTypeName:          "CnmcTypeName",
			CnmcTypeDesc:          "CnmcTypeDesc",
			ConfType:              "ConfType",
			ConfTypeDescription:   "ConfTypeDescription",
			ConsumerType:          "ConsumerType",
			ParticipantNumber:     3,
			ConnType:              "ConnType",
			Excedents:             false,
			Compensation:          true,
			GenerationPot:         4,
			GroupSubgroup:         5,
			AntivertType:          "AntivertType",
			SolarZoneId:           6,
			SolarZoneNum:          7,
			SolarZoneName:         "SolarZoneName",
			TechnologyId:          "TechnologyId",
			TechnologyDescription: "TechnologyDescription",
		},
		{
			ID:       "Id 2",
			InitDate: time.Date(2022, 02, 01, 00, 00, 0, 0, time.UTC),
			EndDate:  time.Date(2022, 03, 01, 00, 00, 0, 0, time.UTC),
		},
	},
	Points: []billing_measures.PointSelfConsumption{
		{
			ID:               "Id 1",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_1",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
		},
	},
}

var BillingSelfConsumptionRepositorySaveInput = billing_measures.BillingSelfConsumption{
	SelfconsumptionId: "ID",
	CAU:               "CAU",
	Name:              "Name",
	DistributorId:     "",
	InitDate:          time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
	EndDate:           time.Date(2022, 01, 31, 00, 00, 0, 0, time.UTC),
	Status:            billing_measures.PendingPoints,
	Config: billing_measures.BillingSelfConsumptionConfig{
		Id:                    "Id",
		CauID:                 "CauID",
		StatusID:              1,
		StatusName:            "StatusName",
		InitDate:              time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
		EndDate:               time.Date(2022, 02, 01, 00, 00, 0, 0, time.UTC),
		CnmcTypeId:            2,
		CnmcTypeName:          "CnmcTypeName",
		CnmcTypeDesc:          "CnmcTypeDesc",
		ConfType:              "ConfType",
		ConfTypeDescription:   "ConfTypeDescription",
		ConsumerType:          "ConsumerType",
		ParticipantNumber:     3,
		ConnType:              "ConnType",
		Excedents:             false,
		Compensation:          true,
		GenerationPot:         4,
		GroupSubgroup:         5,
		AntivertType:          "AntivertType",
		SolarZoneId:           6,
		SolarZoneNum:          7,
		SolarZoneName:         "SolarZoneName",
		TechnologyId:          "TechnologyId",
		TechnologyDescription: "TechnologyDescription",
	},
	Points: []billing_measures.BillingSelfConsumptionPoint{
		{
			ID:               "Id 1",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_1",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
			MvhReceived: []billing_measures.BillingSelfConsumptionPointMvhReceived{
				{
					BillingMeasureId: "BillingMeasureId",
					InitDate:         time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
					EndDate:          time.Date(2022, 01, 31, 00, 00, 0, 0, time.UTC),
				},
			},
		},
		{
			ID:               "Id 2",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_2",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
			MvhReceived:      make([]billing_measures.BillingSelfConsumptionPointMvhReceived, 0),
		},
	},
	Curve: make([]billing_measures.BillingSelfConsumptionCurve, 0),
}

var BillingSelfConsumptionRepositorySaveInputStarted = billing_measures.BillingSelfConsumption{
	SelfconsumptionId: "ID",
	CAU:               "CAU",
	Name:              "Name",
	DistributorId:     "",
	InitDate:          time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
	EndDate:           time.Date(2022, 01, 31, 00, 00, 0, 0, time.UTC),
	Status:            billing_measures.CalculatingPoints,
	Config: billing_measures.BillingSelfConsumptionConfig{
		Id:                    "Id",
		CauID:                 "CauID",
		StatusID:              1,
		StatusName:            "StatusName",
		InitDate:              time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
		EndDate:               time.Date(2022, 02, 01, 00, 00, 0, 0, time.UTC),
		CnmcTypeId:            2,
		CnmcTypeName:          "CnmcTypeName",
		CnmcTypeDesc:          "CnmcTypeDesc",
		ConfType:              "ConfType",
		ConfTypeDescription:   "ConfTypeDescription",
		ConsumerType:          "ConsumerType",
		ParticipantNumber:     3,
		ConnType:              "ConnType",
		Excedents:             false,
		Compensation:          true,
		GenerationPot:         4,
		GroupSubgroup:         5,
		AntivertType:          "AntivertType",
		SolarZoneId:           6,
		SolarZoneNum:          7,
		SolarZoneName:         "SolarZoneName",
		TechnologyId:          "TechnologyId",
		TechnologyDescription: "TechnologyDescription",
	},
	Points: []billing_measures.BillingSelfConsumptionPoint{
		{
			ID:               "Id 1",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_1",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
			MvhReceived: []billing_measures.BillingSelfConsumptionPointMvhReceived{
				{
					BillingMeasureId: "BillingMeasureId",
					InitDate:         time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
					EndDate:          time.Date(2022, 01, 31, 00, 00, 0, 0, time.UTC),
				},
			},
		},
		{
			ID:               "Id 2",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_2",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
			MvhReceived:      make([]billing_measures.BillingSelfConsumptionPointMvhReceived, 0),
		},
	},
	Curve: make([]billing_measures.BillingSelfConsumptionCurve, 0),
}

var BillingSelfConsumptionRepositorySaveInputStartedonPoint = billing_measures.BillingSelfConsumption{
	SelfconsumptionId: "ID",
	CAU:               "CAU",
	Name:              "Name",
	DistributorId:     "",
	InitDate:          time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
	EndDate:           time.Date(2022, 01, 31, 00, 00, 0, 0, time.UTC),
	Status:            billing_measures.CalculatingPoints,
	Config: billing_measures.BillingSelfConsumptionConfig{
		Id:                    "Id",
		CauID:                 "CauID",
		StatusID:              1,
		StatusName:            "StatusName",
		InitDate:              time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
		EndDate:               time.Date(2022, 02, 01, 00, 00, 0, 0, time.UTC),
		CnmcTypeId:            2,
		CnmcTypeName:          "CnmcTypeName",
		CnmcTypeDesc:          "CnmcTypeDesc",
		ConfType:              "ConfType",
		ConfTypeDescription:   "ConfTypeDescription",
		ConsumerType:          "ConsumerType",
		ParticipantNumber:     3,
		ConnType:              "ConnType",
		Excedents:             false,
		Compensation:          true,
		GenerationPot:         4,
		GroupSubgroup:         5,
		AntivertType:          "AntivertType",
		SolarZoneId:           6,
		SolarZoneNum:          7,
		SolarZoneName:         "SolarZoneName",
		TechnologyId:          "TechnologyId",
		TechnologyDescription: "TechnologyDescription",
	},
	Points: []billing_measures.BillingSelfConsumptionPoint{
		{
			ID:               "Id 1",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_1",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
			MvhReceived: []billing_measures.BillingSelfConsumptionPointMvhReceived{
				{
					BillingMeasureId: "BillingMeasureId",
					InitDate:         time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
					EndDate:          time.Date(2022, 01, 31, 00, 00, 0, 0, time.UTC),
				},
			},
		},
	},
	Curve: make([]billing_measures.BillingSelfConsumptionCurve, 0),
}

var GetBySelfConsumptionBetweenDates = billing_measures.BillingSelfConsumption{
	Id:                "ID",
	SelfconsumptionId: "ID",
	CAU:               "CAU",
	Name:              "Name",
	DistributorId:     "",
	InitDate:          time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
	EndDate:           time.Date(2022, 01, 31, 00, 00, 0, 0, time.UTC),
	Status:            billing_measures.PendingPoints,
	Config: billing_measures.BillingSelfConsumptionConfig{
		Id:                    "Id",
		CauID:                 "CauID",
		StatusID:              1,
		StatusName:            "StatusName",
		InitDate:              time.Date(2022, 01, 01, 00, 00, 0, 0, time.UTC),
		EndDate:               time.Date(2022, 02, 01, 00, 00, 0, 0, time.UTC),
		CnmcTypeId:            2,
		CnmcTypeName:          "CnmcTypeName",
		CnmcTypeDesc:          "CnmcTypeDesc",
		ConfType:              "ConfType",
		ConfTypeDescription:   "ConfTypeDescription",
		ConsumerType:          "ConsumerType",
		ParticipantNumber:     3,
		ConnType:              "ConnType",
		Excedents:             false,
		Compensation:          true,
		GenerationPot:         4,
		GroupSubgroup:         5,
		AntivertType:          "AntivertType",
		SolarZoneId:           6,
		SolarZoneNum:          7,
		SolarZoneName:         "SolarZoneName",
		TechnologyId:          "TechnologyId",
		TechnologyDescription: "TechnologyDescription",
	},
	Points: []billing_measures.BillingSelfConsumptionPoint{
		{
			ID:               "Id 1",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_1",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
			MvhReceived:      []billing_measures.BillingSelfConsumptionPointMvhReceived{},
		},
		{
			ID:               "Id 2",
			ServicePointType: "ServicePointType",
			CUPS:             "CUPS_2",
			InstalationFlag:  1,
			WithoutmeterFlag: 2,
			Exent1Flag:       3,
			Exent2Flag:       4,
			PartitionCoeff:   5,
			InitDate:         time.Date(2022, 01, 01, 01, 00, 0, 0, time.UTC),
			EndDate:          time.Date(2022, 01, 01, 02, 00, 0, 0, time.UTC),
			MvhReceived:      make([]billing_measures.BillingSelfConsumptionPointMvhReceived, 0),
		},
	},
	Curve: make([]billing_measures.BillingSelfConsumptionCurve, 0),
}
